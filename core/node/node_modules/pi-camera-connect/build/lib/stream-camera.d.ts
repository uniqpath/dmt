/// <reference types="node" />
import * as stream from "stream";
import { EventEmitter } from "events";
import { Rotation, Flip } from "..";
export declare enum Codec {
    H264 = "H264",
    MJPEG = "MJPEG",
}
export declare enum SensorMode {
    AutoSelect = 0,
    Mode1 = 1,
    Mode2 = 2,
    Mode3 = 3,
    Mode4 = 4,
    Mode5 = 5,
    Mode6 = 6,
    Mode7 = 7,
}
export interface StreamOptions {
    width?: number;
    height?: number;
    rotation?: Rotation;
    flip?: Flip;
    bitRate?: number;
    fps?: number;
    codec?: Codec;
    sensorMode?: SensorMode;
}
interface StreamCamera {
    on(event: "frame", listener: (image: Buffer) => void): this;
    once(event: "frame", listener: (image: Buffer) => void): this;
}
declare class StreamCamera extends EventEmitter {
    static readonly jpegSignature: Buffer;
    private options;
    private childProcess?;
    private streams;
    constructor(options?: StreamOptions);
    startCapture(): Promise<void>;
    stopCapture(): Promise<void>;
    createStream(): stream.Readable;
    takeImage(): Promise<Buffer>;
}
export default StreamCamera;
