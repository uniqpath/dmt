"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const __1 = require("..");
class StillCamera {
    constructor(options = {}) {
        this.options = Object.assign({ rotation: __1.Rotation.Rotate0, flip: __1.Flip.None, delay: 1 }, options);
    }
    takeImage() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield util_1.spawnPromise("raspistill", [
                    /**
                     * Width
                     */
                    ...(this.options.width ? ["--width", this.options.width.toString()] : []),
                    /**
                     * Height
                     */
                    ...(this.options.height ? ["--height", this.options.height.toString()] : []),
                    /**
                     * Rotation
                     */
                    ...(this.options.rotation ? ["--rotation", this.options.rotation.toString()] : []),
                    /**
                     * Horizontal flip
                     */
                    ...(this.options.flip && (this.options.flip === __1.Flip.Horizontal || this.options.flip === __1.Flip.Both) ?
                        ["--hflip"] : []),
                    /**
                     * Vertical flip
                     */
                    ...(this.options.flip && (this.options.flip === __1.Flip.Vertical || this.options.flip === __1.Flip.Both) ?
                        ["--vflip"] : []),
                    /**
                     * Capture delay (ms)
                     */
                    "--timeout", this.options.delay.toString(),
                    /**
                     * Do not display preview overlay on screen
                     */
                    "--nopreview",
                    /**
                     * Output to stdout
                     */
                    "--output", "-"
                ]);
            }
            catch (err) {
                if (err.code === "ENOENT") {
                    throw new Error("Could not take image with StillCamera. Are you running on a Raspberry Pi with 'raspistill' installed?");
                }
                throw err;
            }
        });
    }
}
StillCamera.jpegSignature = Buffer.from([0xFF, 0xD8, 0xFF, 0xE1, 0x64, 0x1A, 0x45, 0x78, 0x69, 0x66, 0x00]);
exports.default = StillCamera;
