/// <reference types="node" />
import * as http2 from 'http2';
export interface Http2ClientOptions {
    port?: number;
    requestTimeout?: number;
    pingInterval?: number;
}
export interface Http2ClientRequestOptions {
    method: string;
    path: string;
    headers: Record<string, string | undefined>;
    body?: string | Buffer;
}
export interface Http2ClientResponse {
    statusCode: number;
    headers: Record<string, unknown>;
    body: string;
}
export declare class Http2Client {
    readonly url: string;
    client: http2.ClientHttp2Session | null;
    readonly requestTimeout: number;
    readonly pingInterval: number;
    private pingIntervalHandle;
    constructor(host: string, options?: Http2ClientOptions);
    /**
     * Closes the underlying http2 client
     */
    close(): Promise<unknown>;
    /**
     * Destroys the underlying http2 client
     */
    destroy(error?: Error, code?: number): void;
    /**
     * Sends an http2 request
     */
    request(options: Http2ClientRequestOptions): Promise<Http2ClientResponse>;
    /**
     * Returns an existing client or creates a new one
     */
    _getOrCreateClient(): http2.ClientHttp2Session;
    /**
     * Sends a ping on an interval
     */
    _createPingInterval(client: http2.ClientHttp2Session): void;
    /**
     * Closes and destorys the existing client. A new client will be created on next request
     */
    _closeAndDestroy(client: http2.ClientHttp2Session): Promise<void>;
}
