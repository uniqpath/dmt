/// <reference types="node" />
import { Secret } from 'jsonwebtoken';
import { EventEmitter } from 'events';
import { Http2Client, Http2ClientResponse } from './http2-client';
import { Notification } from './notifications/notification';
export interface ApnsOptions {
    team: string;
    signingKey: Secret;
    keyId: string;
    defaultTopic?: string;
    host?: string;
    port?: number;
    requestTimeout?: number;
    pingInterval?: number;
    connections?: number;
}
export declare class ApnsClient extends EventEmitter {
    readonly team: string;
    readonly keyId: string;
    readonly signingKey: Secret;
    readonly client: Http2Client;
    readonly defaultTopic?: string;
    private _token;
    constructor(options: ApnsOptions);
    send(notification: Notification): Promise<Notification>;
    sendMany(notifications: Notification[]): Promise<(Notification | {
        error: any;
    })[]>;
    close(): Promise<unknown>;
    private _send;
    /**
     * @private
     * @method _handleServerResponse
     * @param {ServerResponse} res
     * @return {Promise}
     */
    _handleServerResponse(res: Http2ClientResponse, notification: Notification): Notification;
    /**
     * @private
     * @method _getSigningToken
     * @return {String}
     */
    _getSigningToken(): string | null;
    _resetSigningToken(): void;
}
