#!/bin/bash

source "./shell/.bash_util"
source "./shell/.bash_general"
source "./shell/.bash_networking"
source "./shell/.bash_devices"
source "./shell/.bash_dep"
source "./shell/.bash_update"

FROM_DMT_INSTALL=false
if [ "$1" == "from-dmt-install" ]; then
  FROM_DMT_INSTALL=true
  shift
fi

arg="$1"

if [ "$arg" == "--help" ] || [  "$arg" == "-h" ]; then
  printf "${MAGENTA}∞ DMT ∞ ${CYAN}v$(cat "$DMT_PATH/.version")${NC}\n"
  echo
  printf "${WHITE}Install or update ${MAGENTA}.dmt${NC} scripts and shortcuts on this or any remote ${CYAN}Linux / macOS ${NC}machine (by using ssh).\n"
  echo
  printf "${YELLOW}Usage:${NC}\n"

  if $FROM_DMT_INSTALL; then
    printf "${GREEN}dmt install user@host ${GRAY}installs on user@host${NC}\n"
  else
    printf "${GREEN}$0${GRAY} link-installs current directory on this device${NC}\n"
    printf "${GREEN}$0 user@host ${GRAY}installs on user@host, shortcut ${GREEN}$0 ap ${GRAY}installs on ${DMT_AP_DEFAULT_HOST}${NC}\n"
  fi

  exit
fi

DMT_BASH_PATH="$HOME/.dmt/shell"

function compile {
  local cwd="`pwd`"
  cd "$DMT_BASH_PATH"
  ./compile
  cd "$cwd"
}

function install_core_source {
  if [ -d "./core" ]; then
    if [ -d "./core/.git" ]; then
      cd core
      printf "${CYAN}Updating ${MAGENTA}dmt-core${NC} from public repository on ${GRAY}Microsoft GitHub${NC}\n"
      git pull
      cd ..
    else
      printf "${YELLOW}core already exists but is not a git repo, not updating${NC}\n"
    fi
  else
    printf "${CYAN}Pulling ${MAGENTA}dmt-core${NC} from public repository on ${GRAY}Microsoft GitHub${NC}\n"
    git clone https://github.com/uniqpath/dmt-core core
    local cwd="`pwd`"
    cd "core/node/.scripts"
    ./symlink_dmt_deps
    cd "$cwd"
  fi
}

function install_core_bin {
  if [ -d "./bin" ]; then
    if [ -d "./bin/.git" ]; then
      cd bin
      printf "\n${CYAN}Updating ${MAGENTA}dmt-bin${NC} from public repository on ${GRAY}Microsoft GitHub${NC}\n"
      git pull
      cd ..
    fi
  else
    printf "\n${CYAN}Pulling ${MAGENTA}dmt-bin${NC} from public repository on ${GRAY}Microsoft GitHub${NC}\n"
    git clone https://github.com/uniqpath/dmt-bin bin
  fi
}

if [ -z "$arg" ] || [ "$arg" == "full" ]; then # install here

    COMPILED_BASH_ALIASES="$HOME/.dmt/etc/.bash_aliases_bundle"

    compile

    if [ ! -f "$COMPILED_BASH_ALIASES" ]; then
      printf "${RED}Error: compilation was supposed to produce $COMPILED_BASH_ALIASES${NC}\n"
      exit
    fi

    mkdir -p "$DMT_PATH/log"
    mkdir -p "$DMT_STATE"

    if [ -f "$HOME/.bash_aliases" ] || [ -L "$HOME/.bash_aliases" ]; then # -L : we check for broken symlink (-f would return true for working symlink but not for a broken one)
      if [ -f "$HOME/.bash_aliases" ] && [ "$(head -3 "$HOME/.bash_aliases" | tail -1)" == "# DMT ALIASES" ]; then
        rm "$HOME/.bash_aliases"
      else
        mv "$HOME/.bash_aliases" "$HOME/.bash_aliases-backup-by-dmt"
        printf "\n${GRAY}Backed up $HOME/.bash_aliases → $HOME/.bash_aliases-backup-by-dmt${NC}\n\n"
      fi
    fi

    ln -s "$COMPILED_BASH_ALIASES" "$HOME/.bash_aliases"

    # run after-install (=after-update) hooks
    after_update_hook="$HOME/.dmt/user/devices/this/after-update"
    if [ -f "$after_update_hook" ]; then
      "$after_update_hook"
    fi

    if [ "$arg" == "full" ]; then
      install_core_source
      install_core_bin
    fi

    printf "\n${YELLOW}Congrats!${NC} ${MAGENTA}∞ DMT SYSTEM ∞${NC} installed on ${CYAN}$(hostname)${NC}\n\n"
    printf "Enter ${GREEN}dmt help${NC} to start. ${YELLOW}If it doesn't work, try ${MAGENTA}source ~/.bash_aliases ${YELLOW}first.${NC}\n\n"
    printf "${GRAY}If this works, then try to log out of terminal and back in.${NC}\n"
    printf "${GRAY}If it still works, ${GREEN}then everything is set up correctly.${NC}\n"
    printf "${GRAY}If not, read the docs at ${CYAN}https://github.com/uniqpath/dmt/blob/master/INSTALL.md${NC}\n"

    . "$HOME/.bash_aliases"

else # clone to and install on remote device

    host="$arg"

    if [ "$host" == "ap" ]; then
      host="$DMT_AP_DEFAULT_HOST"
    else
      matching_host=''
      ssh_port=''
      get_full_host matching_host ssh_port "$host"
      if [ $? -ne 1 ]; then # not error
        host="$matching_host"
      fi
    fi

    if [ -z "$host" ]; then
      printf "${RED}Host not known${NC}\n"
      return
    fi

    target="${host}:.dmt"

    printf "${CYAN}Installing on ${YELLOW}$host:$ssh_port${NC}\n"

    compile

    dirsync --port $ssh_port ~/.dmt "$target"

    remote --silent -h "$host" --port "$ssh_port" "cd ~/.dmt; ./install"

fi
