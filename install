#!/bin/bash

# basic functions -- we need this for color definitions etc.
. ./shell/.shell_basic

arg="$1"

if [ "$arg" == "--help" ] || [  "$arg" == "-h" ]; then
  printf "${MAGENTA}‚àû DMT ‚àû ${CYAN}v$(cat "$DMT_PATH/.version")${NC}\n"
  echo
  printf "${WHITE}Install or update ${MAGENTA}.dmt${NC} scripts and shortcuts on this or any remote ${CYAN}Linux / macOS ${NC}machine (by using ssh).\n"
  echo
  printf "${YELLOW}Usage:${NC}\n"

  printf "${GREEN}$0${GRAY} install on this device${NC}\n"
  printf "${GREEN}$0 user@host ${GRAY}installs on user@host, shortcut ${GREEN}$0 ap ${GRAY}installs on ${DMT_AP_DEFAULT_HOST}${NC}\n"

  exit
fi

# this install script is used in two scenarios:
#
# A) after we get the ~/.dmt directory (for example by cloning the https://github.com/uniqpath/dmt repo)
#    it sets up basic things and doesn't do anything outside of ~/.dmt directory except add one line to
#    ~/.bash_profile, ~/.bashrc or ~/.zshrc (as appropriate) which then enables the user to have access
#    to "dmt" command to be able to manipulate (start, stop, restart) the "dmt-proc" (dmt process -
#    a main component of dmt-system).
#
# B) if install script is called with one argument (user@host), then it will
#    - first rsync our entire ~/.dmt directory to that device
#    - call this same ./install script without any arguments on that device to set it up in the same way
#      as it set up this device

DMT_BASH_PATH="$HOME/.dmt/shell"

function compile {
  local cwd="`pwd`"
  cd "$DMT_BASH_PATH"
  ./compile
  cd "$cwd"
}

function check_node_js_version {
  which node > /dev/null 2>&1

  if [ $? -eq 0 ]; then # node command exists
    node_version=$(node -v | sed "s/v//")

    a=( ${node_version//./ } ) # replace points, split into array
    major=${a[0]}
    minor=${a[1]}

    b=( ${DMT_MIN_NODEJS_VERSION//./ } ) # DMT_MIN_NODEJS_VERSION comes from .bash_dmt_vars
    min_major=${b[0]}
    min_minor=${b[1]}

    if (( ${major} < $min_major )) || ( (( ${major} == $min_major )) && (( ${minor} < $min_minor )) ); then
      echo
      printf "‚ö†Ô∏è  ${RED}Your ${CYAN}node.js ${RED}version is ${YELLOW}${node_version}${RED}, please install ${CYAN}${DMT_MIN_NODEJS_VERSION} ${RED}or higher${NC}\n"
    fi
  else
    echo
    printf "‚ö†Ô∏è  ${CYAN}node.js ${RED}is not installed${GRAY}, please install ${YELLOW}node.js v${DMT_MIN_NODEJS_VERSION} ${GRAY}or higher${NC}\n"
  fi
}

if [ -z "$arg" ]; then # install here

    COMPILED_BASH_ALIASES="$HOME/.dmt/etc/.bash_aliases_bundle"

    # 1.) we concatenate all dmt shell scripts into one file -- .bash_aliases_bundle
    #     this file is sourced from some scripts as needed but is not loaded by default in user's shell
    compile

    if [ ! -f "$COMPILED_BASH_ALIASES" ]; then
      printf "${RED}Error: compilation was supposed to produce $COMPILED_BASH_ALIASES${NC}\n"
      exit
    fi

    # 2.) we create some needed empty dirs
    mkdir -p "$DMT_STATE"
    mkdir -p "$DMT_PATH/log"

    # 3.) if there is no ~/.dmt/user directory, we copy the pre-defined sample user from ~/.dmt/etc/sample_user
    if [ ! -d "$DMT_PATH/user" ] && [ -d "$DMT_PATH/etc/sample_user" ]; then
      cp -r "$DMT_PATH/etc/sample_user" "$DMT_PATH"
      mv "$DMT_PATH/sample_user" "$DMT_PATH/user"
      cwd="`pwd`"
      cd "$DMT_PATH/user/devices"
      ln -s "dmt-new" "this"
      cd "$cwd"
    fi

    # 4.) ~/.dmt/shell/.inject script will add one line to the end of ~/.bash_profile, ~/.bashrc or ~/.zshrc:
    # if [ -f ~/.dmt/shell/.loader ]; then . ~/.dmt/shell/.loader; fi # Added by dmt-system (see https://github.com/uniqpath/dmt)
    # this line sources our .loader which then sources only the "dmt" shell command by default but can source more if
    # an appropriate option "shell: full" is found inside ~/.dmt/user/def/user.def
    "$DMT_PATH/shell/.inject"

    # 4.) run after-install (=after-update) hooks

    # This is useful mostly only in the second (B) case after we ./install is called on remote device (via "dmt update user@host")
    # "$HOME/.dmt/etc/deploy_hooks/after-update" contains just one important line
    # node "${DMT_NODE_CORE}/dmt-gui/gui-backend/ws_servers/index.js" localhost reload gui
    # -- this is used to send the "reload" command to all connected guis so that they reload possible changes that arrived on update (sync)

    # general deploy hooks -- all devices
    after_update_hook="$HOME/.dmt/etc/deploy_hooks/after-update"
    if [ -f "$after_update_hook" ]; then
      echo "RUN HOOK:"
      cat "$after_update_hook"
      "$after_update_hook" #> /dev/null 2>&1 # redirected to /dev/null because we get ws exception if dmt-proc is not running when trying to restart gui by sending a websocket message
    fi

    # (possibly defined) for each particular device
    after_update_hook="$HOME/.dmt/user/devices/this/after-update"
    if [ -f "$after_update_hook" ]; then
      "$after_update_hook"
    fi

    echo

    printf "${YELLOW}Congrats!${NC} ${MAGENTA}‚àû DMT ‚àû${NC} installed on ${CYAN}$(hostname).${NC}\n"
    echo
    printf "${GRAY}Project website ‚Äî ${MAGENTA}dmt-system.com ${GRAY}/ ${CYAN}github.com/uniqpath/dmt${NC}\n"
    echo
    printf "Enter ${GREEN}dmt${NC} command to see the options üí°${YELLOW}\n"
    printf "${GRAY}----------------------------------------${NC}\n"
    printf "To start ${CYAN}dmt-proc${NC} with visible log output enter ${GREEN}dmt startfg${NC} üöÄ\nand to start normally in background enter ${GREEN}dmt start${NC} üöÄ\n\n"
    printf "‚ö†Ô∏è  If ${GREEN}dmt ${GRAY}command doesn't work ${MAGENTA}open new terminal${GRAY} or ${CYAN}source ~/.dmt/shell/.loader ${GRAY}${NC}\n"

    check_node_js_version
    echo

else # clone to and install on remote device

    # we need this for dirsync, remote and get_full_host functions
    . ./shell/.shell_advanced

    host="$arg"

    if [ "$host" == "ap" ]; then
      host="$DMT_AP_DEFAULT_HOST"
      ssh_port=22
    else
      matching_host=''
      ssh_port=''
      get_full_host matching_host ssh_port "$host"
      if [ $? -ne 1 ]; then # not error
        host="$matching_host"
      fi
    fi

    if [ -z "$host" ]; then
      printf "${RED}Host not known${NC}\n"
      return
    fi

    target="${host}:.dmt"

    printf "${CYAN}Installing on ${YELLOW}$host:$ssh_port${NC}\n"

    dirsync --port $ssh_port ~/.dmt "$target"

    remote --silent -h "$host" --port "$ssh_port" "cd ~/.dmt; ./install"

fi
