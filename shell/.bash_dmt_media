#!/bin/bash

# m = MEDIA
# music (default), video (@media=video)
function dmt_media {
  declare -a opts=(
    "help"

    "search"

    "play"
    "pause"
    "stop"
    "next"

    "volume"
    "status"
    "list"

    "add"
    "insert"
    "insplay" # insert-play
    #"clone" # repeats current song n-times (default: 1)
    "bump" # moves song to the next position

    "shuffle"
    "cut"
    "paste"

    "forward"
    "backward"
    "goto"

    "limit"
    "repeat"

    # "spaced"
    # "unspaced"
  )

  if [ "$1" == "-h" ]; then
    printf "${YELLOW}Usage:${NC}\n"
    printf "${GREEN}${opts[@]}${NC}\n"
    return
  fi

  # m [command] @hosts [terms]
  local command=''

  if [[ "$1" != @* ]]; then
    command="$1"
    shift
  fi

  #-----------#-----------#----------- A BIT OF DUPLICATE CODE FROM function dmt
  local hosts=""

  local args
  IFS=' ' read -r -a args <<< "$@"

  for arg in "${args[@]}"
  do
    if [ "$arg" == "@all" ]; then
      local network_id=''
      get_current_network network_id
      if [ -n "$network_id" ]; then
        # extract host from @ symbol but replace @all with the name of current network !
        hosts="${hosts} @@$network_id"
        shift
      fi
    elif [[ "$arg" == @* ]] && [[ ! "$arg" =~ = ]]; then # @count=200 etc. these should not be treated as hostnames
      hosts="${hosts} ${arg}"
      shift
    fi
  done

  hosts=$(echo "$hosts" | xargs) # remove trailing whitespace
  #-----------#-----------#-----------

  local matching_opt=''
  dmt_opts_matcher matching_opt "no_warning" "${command}" "${opts[@]}"
  if [ $? -ne 0 ]; then # error
    matching_opt="play" # default command when none specified
  fi

  local playerCmd="$DMT_NODE_CORE/dmt-player/cli/media.js"

  if [ ! -f "$playerCmd" ]; then # dmt shell before v1.0.79 :::
    playerCmd="$DMT_NODE_CORE/dmt-controller/cli/music.js"
  fi

  if [ -z "$hosts" ]; then
    $DMT_NODEJS_EXEC "$playerCmd" "${matching_opt}" "$@"
  else
    $DMT_NODEJS_EXEC "$playerCmd" "${hosts}" "${matching_opt}" "$@"
  fi
}

function dmt_save_alsa {
  alsactl --file ~/.config/asound.state store
}

function dmt_restore_alsa {
  alsactl --file ~/.config/asound.state restore
}

function dmt_soundtest {
  if dmt_is_rpi; then
    printf "${GREEN}Soundtest ${MAGENTA}0.${NC}\n"
    aplay "$DMT_PATH/etc/sounds/soundtest/music.wav"
  fi

  which mpv > /dev/null 2>&1

  if [ ! $? -eq 0 ]; then
    printf "${MAGENTA}mpv is missing, please install it....${NC}\n"
    printf "${GRAY}debian linux / raspberrypi${NC} → ${GREEN}sudo apt-get install mpv${NC}\n"
    printf "${GRAY}macos${NC} → ${GREEN}brew install mpv${NC}\n"
    printf "${GRAY}windows${NC} → ${YELLOW}?${NC}\n"
    return
  fi

  #printf "${GREEN}Soundtest ${MAGENTA}1.${NC}\n"
  #mpv --no-video "$DMT_PATH/etc/sounds/soundtest/music.mp3"

  printf "${GREEN}Soundtest ${MAGENTA}1.${NC}\n"
  $DMT_NODEJS_EXEC "$DMT_NODE_CORE/dmt-controller/lib/player/localMusicPlayer.js"
}


function dmt_videotest {
  # if dmt_is_rpi; then
  #   printf "${GREEN}Soundtest ${MAGENTA}0.${NC}\n"
  #   aplay "$DMT_PATH/etc/sounds/soundtest/music.wav"
  # fi

  which mpv > /dev/null 2>&1

  if [ ! $? -eq 0 ]; then
    printf "${MAGENTA}mpv is missing, please install it....${NC}\n"
    printf "${GRAY}debian linux / raspberrypi${NC} → ${GREEN}sudo apt-get install mpv${NC}\n"
    printf "${GRAY}macos${NC} → ${GREEN}brew install mpv${NC}\n"
    printf "${GRAY}windows${NC} → ${YELLOW}?${NC}\n"
    return
  fi

  #printf "${GREEN}Videotest ${MAGENTA}1.${NC}\n"
  #mpv "$DMT_PATH/etc/videos/videotest/video.mp4"

  printf "${GREEN}Videotest ${MAGENTA}1.${NC}\n"
  $DMT_NODEJS_EXEC "$DMT_NODE_CORE/dmt-controller/lib/player/localVideoPlayer.js"
}
