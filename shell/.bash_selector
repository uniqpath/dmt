#!/bin/bash

UP=$'\033[A'
DOWN=$'\033[B'

#
# Log <type> <msg>
#

log() {
  printf "  \033[36m%10s\033[0m : \033[90m%s\033[0m\n" $1 $2
}

#
# Exit with the given <msg ...>
#

abort() {
  printf "\n  \033[31mError: $@\033[0m\n\n" && exit 1
}

#
# Functions used when showing versions installed
#

enter_fullscreen() {
  tput smcup
  stty -echo
}

leave_fullscreen() {
  tput rmcup
  stty echo
}

handle_sigint() {
  #show_cursor
  leave_fullscreen
  exit $?
}

handle_sigtstp() {
  #show_cursor
  leave_fullscreen
  kill -s SIGSTOP $$
}

#
# Display sorted versions directories paths.
#

EMPTY_OPTION="_NONE_"

versions_paths() {
  echo "$EMPTY_OPTION"
  local BASE_PATH="$DMT_PATH/user/devices"
  find "$BASE_PATH" -maxdepth 1 -type d \
    | sed 's|'$BASE_PATH'/||g' \
    | grep -v "$BASE_PATH" \
    | grep -v "^@" \
    | sort
}

#
# List installed versions.
#

list_versions_installed() {
  for version in $(versions_paths); do
    echo $version
  done
}

#
# Display installed versions with <selected>
#

display_versions_with_selected() {
  selected=$1
  echo
  for version in $(versions_paths); do
    if test "$version" = "$selected"; then
      printf "  \033[36mÎ¿\033[0m $version\033[0m\n"
    else
      printf "    \033[90m$version\033[0m\n"
    fi
  done
  echo
}

#
# Hide cursor.
#

hide_cursor() {
  printf "\e[?25l"
}

#
# Show cursor.
#

show_cursor() {
  printf "\e[?25h"
}

#
# Output version after selected.
#

next_version_installed() {
  list_versions_installed | grep -w "${selected}" -A 1 | tail -n 1
}

#
# Output version before selected.
#

prev_version_installed() {
  list_versions_installed | grep -w "${selected}" -B 1 | head -n 1
}

#
# Check for installed version, and populate $active
#

check_current_version() {
  local device_name=''
  get_current_device device_name

  if [ -n "$device_name" ]; then
    active=$device_name
  else
    active=$EMPTY_OPTION
  fi
}

#
# Activate <version>
#

activate() {
  local selected="$1"
  check_current_version

  if test "$selected" != "$active"; then
    local cwd="`pwd`"
    cd "$DMT_PATH/user/devices"

    if [ "$selected" != "$EMPTY_OPTION" ]; then
      if [ -L "this" ]; then
        rm this
      fi
      ln -s "$selected" this
    elif [ -L "this" ]; then
      rm this
    fi
    cd "$cwd"
  fi
}

#
# Move up a line and erase.
#

# erase_line() {
#   printf "\033[1A\033[2K"
# }

#
# Display current node --version and others installed.
#

device_selector() {
  enter_fullscreen
  check_current_version
  clear
  display_versions_with_selected $active

  trap handle_sigint INT
  trap handle_sigtstp SIGTSTP

  ESCAPE_SEQ=$'\033'
  UP=$'A'
  DOWN=$'B'

  while true; do
    read -rsn 1 key
    case "$key" in
      $ESCAPE_SEQ)
        # Handle ESC sequences followed by other characters, i.e. arrow keys
        read -rsn 1 -t 1 tmp
        if  [[ "$tmp" == "[" ]]; then
          read -rsn 1 -t 1 arrow
          case "$arrow" in
            $UP)
              clear
              display_versions_with_selected $(prev_version_installed)
              ;;
            $DOWN)
              clear
              display_versions_with_selected $(next_version_installed)
              ;;
          esac
        fi
        ;;
      # "k")
      #   clear
      #   display_versions_with_selected $(prev_version_installed)
      #   ;;
      # "j")
      #   clear
      #   display_versions_with_selected $(next_version_installed)
      #   ;;
      "q")
        clear
        leave_fullscreen
        exit
        ;;
      "")
        # enter key returns empty string
        activate $selected
        leave_fullscreen
        #echo $selected
        exit
        ;;
    esac
  done
}
