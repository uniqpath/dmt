#!/bin/bash

function create_install_directory {
  mkdir -p ~/Install
}

function zeta_update {
  declare -a opts=(
    "nodejs"
    "go"
    "rust"
    # "geth"
    "swarm"
    "swarm-docs"
    "lighttpd"
    # "youtube-dl"
    "yt-dlp"
    "certbot"
    "shairport"
  )

  if [ "$1" == '-h' ] || [ -z "$1" ]; then
    printf "${GREEN}Options:${NC}\n"
    echo "${opts[@]}"
    return
  fi

  local matching_opt=''
  dmt_opts_matcher matching_opt "$1" "${opts[@]}"
  if [ $? -ne 0 ]; then # error
    return
  fi

  shift

  case "$matching_opt" in
    rust)
      update_rust "$@"
      ;;

    go)
      update_go "$@"
      ;;

    nodejs)
      update_nodejs "$@"
      ;;

    geth)
      update_geth "$@"
      ;;

    shairport)
      update_shairport "$@"
      ;;

    lighttpd)
      local script="$DMT_SCRIPTS/lighttpd/install_lighttpd"

      if [ -f "$script" ]; then
        sudo "$script" "$@"
      else
        printf "${RED}missing ${script}${NC}\n"
      fi
      ;;

    # youtube-dl)
    #   if [ "$EUID" -ne 0 ]; then
    #     printf "${RED}Must be root${NC}\n"
    #     echo "wget https://yt-dl.org/downloads/latest/youtube-dl --no-check-certificate -O /usr/local/bin/youtube-dl"
    #     echo "chmod a+rx /usr/local/bin/youtube-dl"
    #   else
    #     wget https://yt-dl.org/downloads/latest/youtube-dl -O /usr/local/bin/youtube-dl
    #     chmod a+rx /usr/local/bin/youtube-dl
    #   fi
    #   ;;

    yt-dlp)
      if [ "$EUID" -ne 0 ]; then
        printf "${RED}Must be root${NC}\n"
        echo "sudo curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp"
        echo "sudo chmod a+rx /usr/local/bin/yt-dlp"
      else
        sudo curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp
        sudo chmod a+rx /usr/local/bin/yt-dlp
      fi
      ;;

    certbot)
      update_certbot
      ;;

  esac
}

function install_n {
  curl -L https://git.io/n-install | bash
  printf "\n${GREEN}Now quit session and login again, then run 'n latest'${NC}\n"
}

# ----------------------------- APPLICATIONS -----------------------------

# function update_swarm_bee {
#   create_install_directory

#   local dir=~/Install/swarm-bee

#   if [ -d $dir ]; then
#     # todo: check for linux-arm and linux-x64 here instead of !macos
#     # use: get_machine_os function
#     if ! dmt_macos; then
#       update_go
#     fi

#     local swarm_binary="${dir}/dist/bee"

#     if [ -f "$swarm_binary" ]; then
#       printf "⚠️ ${YELLOW}Swarm 🐝${NC} already exists here → ${GRAY}${swarm_binary}${NC}\n"
#       "$swarm_binary" version
#     fi

#     local cwd="`pwd`"
#     cd $dir

#     git pull
#     make binary

#     echo

#     if [ -f "$swarm_binary" ]; then
#       printf "${MAGENTA}Installed ${YELLOW}Swarm 🐝${NC} ${MAGENTA}version:${NC}\n"
#       "$swarm_binary" version

#       echo

#       printf "\n${GREEN}New compiled executable is here: ${GRAY}${swarm_binary}${NC}\n"

#       copy_swarm_binary_to_dmt "$swarm_binary"
#     else
#       printf "${RED}✖ Failed to produce ${swarm_binary}${NC}\n"
#     fi

#     cd "$cwd"
#   else
#     printf "${YELLOW}Missing directory: ${dir} ${NC}\n"
#     printf "${GREEN}Creating ${GRAY}${dir}${NC} directory and installing ${YELLOW}Swarm 🐝${NC} into it ...${NC}\n"
#     mkdir -p "$dir"

#     local cwd="`pwd`"
#     cd "$dir"
#     git clone https://github.com/ethersphere/bee .
#     cd "$cwd"

#     update_swarm_bee
#   fi
# }

# function update_swarm_bee_docs {
#   dmt_ensure_nodejs_npm
#   if [ ! $? -eq 0 ]; then
#     return
#   fi

#   create_install_directory

#   local dir=~/Install/swarm-docs

#   if [ -d $dir ]; then

#     cd $dir

#     git pull

#     echo
#     printf "${GREEN}Installing node.js dependencies ...${NC}\n"

#     npm install

#     if [ ! -d "node_modules" ]; then
#       printf "⚠️  ${RED}failed to install nodejs deps (node_modules)${NC}\n"
#       return
#     fi

#     echo

#     printf "${GREEN}Done 🐝${NC}\n"

#     echo
#     printf "💡 1) ${YELLOW}Now please enter:${NC}\n"
#     echo
#     printf "${GREEN}npm run start${NC} here in this directory ${GRAY}(${dir})${NC}\n"
#     echo
#     printf "💡 2) ${YELLOW}Open this url in browser${NC} ${GRAY}(if it doesn't open automatically):${NC}\n"
#     echo
#     printf "${CYAN}http://localhost:3000${NC}\n"
#     echo
#   else
#     printf "${YELLOW}Missing directory: ${dir} ${NC}\n"
#     printf "${GREEN}Creating ${GRAY}${dir}${NC} directory and installing ${YELLOW}🐝 swarm-docs${NC} in it ...${NC}\n"
#     echo
#     mkdir -p "$dir"

#     cd "$dir"
#     git clone https://github.com/ethersphere/docs.github.io.git .

#     update_swarm_bee_docs
#   fi
# }

# function copy_swarm_binary_to_dmt() {
#   local swarm_binary="$@"

#   # local os=''
#   # get_machine_os os
#   #local target="$DMT_PATH/user/bin/${os}"

#   local target="$DMT_HERE_PLATFORM_BIN"

#   printf "${GREEN}Copying ${YELLOW}Swarm 🐝${NC} to ${GRAY}${target}${NC}\n"

#   mkdir -p "$target"

#   cp "$swarm_binary" "$target"
# }

function update_nodejs {
  local version="latest"

  if [ -n "$1" ]; then
    version="$1"
  fi

  if [ -d ~/n ] && [ -n "$N_PREFIX" ]; then
    n "$version"
  else
    # MORE INFO: https://github.com/mklement0/n-install
    # Basic LTS install with manual confirmation:
    # curl -L https://git.io/n-install | bash
    #curl -L https://git.io/n-install | bash -s -- -y latest
    curl -L https://git.io/n-install | bash -s -- -y "$version"

    if [ ! -d ~/n ]; then
      printf "⚠️  ${RED}Error installing node.js${NC}\n"
      return
    fi

    echo
    #printf "${GRAY}You can install latest node version with this command:${NC}\n"
    #printf "${GREEN}n latest${NC} ${GRAY}installs latest node.js version instead of LTS (long term support)${NC}\n"
    printf "${GREEN}n${NC} ${GRAY}manages node versions${NC}\n"
    printf "${GREEN}n --help${NC} ${GRAY}show help${NC}\n"
    echo
    export N_PREFIX="$HOME/n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"  # Added by n-install (see http://git.io/n-install-repo).
    printf "${GREEN}✓${NC} Installed ${MAGENTA}node.js $(node --version)${NC}\n"
    echo
    printf "⚠️  ${YELLOW}Please open new terminal tab if ${GREEN}node${NC} ${YELLOW}and${NC} ${GREEN}npm${NC} ${YELLOW}commands are not found.${NC}\n"
  fi
}

# ⚠️ ADD DELAY TO START... OR SET AFTER PULSEAUDIO
function update_shairport {
  if ! dmt_is_linux; then
    local our_os=''
    get_machine_os our_os

    printf "⚠️  ${RED}Your operating system is ${YELLOW}${our_os}${NC}\n"
    printf "${GREEN}You can run this install only on linux system.${NC}\n"
    return 1
  fi

  local install_dir=~/Install/shairport-sync

  if [ -d "$install_dir" ]; then
    printf "${RED}${install_dir} directory already exists${NC}\n"
    return 1
  fi

  mkdir -p ~/Install

  local cwd="`pwd`"
  cd ~/Install

  git clone https://github.com/mikebrady/shairport-sync.git

  if [ ! -d "$install_dir" ]; then
    printf "${RED}Failed to clone the github repository${NC}\n"
    return 1
  fi

  cd "$install_dir"

  sudo apt-get update
  sudo apt-get install -y libpopt-dev libtool libconfig-dev libssl-dev

  autoreconf -i -f

  if [ $? -ne 0 ]; then # error
    printf "${RED}Error${NC}\n"
    return 1
  fi

  #--with-mqtt-client ?
  ./configure --sysconfdir=/etc --with-pa --with-stdout --with-pipe --with-tinysvcmdns --with-systemd --with-metadata --with-ssl=openssl

  if [ $? -ne 0 ]; then # error
    printf "${RED}Error${NC}\n"
    return 1
  fi

  make

  if [ $? -ne 0 ]; then # error
    printf "${RED}Error${NC}\n"
    return 1
  fi

  sudo make install

  local service="/lib/systemd/system/shairport-sync.service"

  if [ -f "$service" ]; then
    # we are not using avahi but in-process embedded tinysvcmdns
    # Remove these lines:
    # Requires=avahi-daemon.service
    # After=avahi-daemon.service
    sed -i '/avahi/d' "$service" # delete all lines containing 'avahi' from the service file
    # if we don't do that, we will have problems starting shairport-sync service:
    # Failed to start shairport-sync.service: Unit avahi-daemon.service is masked

    sudo systemctl enable shairport-sync
    sudo systemctl start shairport-sync
    sudo systemctl status shairport-sync
  else
    printf "${RED}systemd service was not installed${NC}\n"
  fi

  cd "$cwd"
}

function update_rust {
  which rustc > /dev/null 2>&1

  if [ $? -eq 0 ]; then # rustc command exists
    printf "${GREEN}Updating Rust via rustup${NC}\n"
    rustup update
    rustc --version
  else
    printf "${YELLOW}Rust not present, installing ...${NC}\n"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

    if [ -f ~/.profile ]; then
      source ~/.profile
      rustc --version
    fi
  fi
}

function update_go {
  local INSTALLED_VERSION

  if [ -d "/usr/local/go" ]; then
    #printf "${YELLOW}Go seems to be already installed in /usr/local/go${NC}\n"
    local ver=$(go version)

    if [[ $ver =~ (version )(go[[:digit:]\.]*) ]]; then
      INSTALLED_VERSION=${BASH_REMATCH[2]}
      #echo "match: '${BASH_REMATCH[2]}'"
    else
      printf "${RED}Error determining Go version ${ver}${NC}\n"
      return
    fi
  fi

  if dmt_macos; then
    printf "${RED}Script currently only runs on linux ...${NC}\n"
    return
  fi

  local version=$(curl https://go.dev/VERSION?m=text 2>/dev/null)

  if [ "$version" == "$INSTALLED_VERSION" ]; then
    printf "${GREEN}The most recent version of Go ↴${NC}\n"
    go version
    printf "${GREEN}is already installed ✓${NC}\n"
    return
  fi

  if [ -d "/usr/local/go" ]; then
    printf "${YELLOW}Removing previous version ${INSTALLED_VERSION}...${NC}\n"
    sudo rm -rf /usr/local/go
  fi

  # todo: actually detect these, list of options:
  # os: linux, darwin, windows, freebsd arch : amd64, 386, armv6l, arm64, s390, ppc64le
  # source: https://stackoverflow.com/a/56177551
  local os="linux"
  local arch="amd64"

  if dmt_is_rpi; then
    arch="armv6l"
  fi

  local cwd="`pwd`"
  cd ""

  local url="https://dl.google.com/go/${version}.${os}-${arch}.tar.gz"

  printf "${GREEN}Installing ${MAGENTA}$version${NC} from ${YELLOW}${url}${NC}...${NC}\n"

  cd $(mktemp -d)

  curl -o go.tar.gz "$url"
  gunzip go.tar.gz
  tar xfv go.tar

  printf "${YELLOW}Please enter sudo password if prompted:${NC}\n"

  sudo chown -R root:root ./go
  sudo mv go /usr/local

  if [ -z "$INSTALLED_VERSION" ]; then
    if [ -f ~/.bashrc ]; then
      printf "${GRAY}Adding info to ~/.bashrc ... check fo possible duplicates ... ${NC}\n"

      # todo: improve and use code from dmt installer which checks for presence ... and also adds to zshrc
      # currently we assume if Go var already installed, that this is present ...
      echo >> ~/.bashrc
      echo "export GOPATH=\$HOME/go" >> ~/.bashrc
      echo "export PATH=\$PATH:/usr/local/go/bin:\$GOPATH/bin" >> ~/.bashrc
    else
      printf "${RED}~/.bashrc is not present ...${NC}\n"
    fi
  fi

  cd "$cwd"

  printf "\n${GREEN}go should be installed:${NC}\n"
  source ~/.bashrc
  go version
  echo
  #printf "\n${MAGENTA}Reload terminal to use 'go' command ...${NC}\n"
}

function update_certbot {
  sudo apt-get install -y certbot python3-certbot-dns-cloudflare

  # sudo apt-get install -y python-cffi python-dev

  # local cwd="`pwd`"
  # mkdir ~/Install
  # cd ~/Install

  # git clone https://github.com/certbot/certbot

  # cd certbot

  # git checkout v1.7.0

  # cd certbot

  # sed -i 's/parsedatetime>=1.3/parsedatetime==1.5/' setup.py

  # sudo python setup.py install

  # certbot plugins

  # cd ~/Install/certbot/certbot-dns-cloudflare

  # sudo python setup.py install

  certbot plugins

  printf "${GREEN}dns-cloudflare${NC} should be visible in plugins\n"
  echo
  printf "${GREEN}You can now do something like:${NC}\n"

  echo "certbot certonly -d uniqpath.com -d *.uniqpath.com --dns-cloudflare-credentials /home/[user]/.dmt/user/access_tokens/cloudflare/dns.ini"

  #cd "$cwd"
}

# function start_geth {
#   #geth --rpc --rpcapi "db,eth,net,web3,personal" --rpcaddr 0.0.0.0 --rpccorsdomain "*" --rpcvhosts "localhost,solar.local,eth.uniqpath.com" --cache=1024 --maxpeers 100 --lightserv 80 --lightpeers 90
#   geth --rpc --rpcapi "eth,net,web3,personal" --cache=1024 --maxpeers 100 --lightserv 80 --lightpeers 90
#   #geth --rpc --rpcapi "eth,net,web3,personal" --cache=2048 --maxpeers 100 --lightserv 80 --lightpeers 90
#   #geth --rpc --rpcapi "eth,net,web3,personal" --cache=2048 --snapshot
# }

# function update_geth {
#   which go > /dev/null 2>&1

#   if [ ! $? -eq 0 ]; then # go command does not exist
#     printf "${RED}Warning: 'go' is not installed${NC}\n"
#     printf "Use ${GREEN}update go${NC} first.\n"
#     return
#   fi

#   local GETH_PATH="$GOPATH/src/github.com/ethereum/go-ethereum"

#   if [ -d "$GETH_PATH" ]; then
#     cd "$GETH_PATH"

#     git pull
#     latest_tag

#     go install -v ./cmd/geth
#   else
#     printf "${MAGENTA}geth not installed, installing [please wait] ...${NC}\n"

#     # downloads git repo to $GOPATH/src/github.com/ethereum/go-ethereum
#     go get -d github.com/ethereum/go-ethereum

#     update_geth # checkout the latest tag now and compile
#   fi
# }
