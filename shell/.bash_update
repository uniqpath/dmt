#!/bin/bash

# Reload the environment
function rel2 {
  if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
  fi
  if [ -f ~/.bashrc ]; then
    . ~/.bashrc
  fi
  if [ -f ~/.bash_profile ]; then
    . ~/.bash_profile
  fi
}

function update {

  if [ "$1" == '-h' ]; then
    printf "${YELLOW}Usage:${NC}\n"
    printf "${GREEN}dmt${NC} ${GRAY}${NC}\n"
    printf "${GREEN}rust${NC} ${GRAY}${NC}\n"
    printf "${GREEN}geth${NC} ${GRAY}${NC}\n"
    printf "${GREEN}swarm${NC} ${GRAY}${NC}\n"
    printf "${GREEN}parity${NC} ${GRAY}${NC}\n"
    return
  fi

  declare -a opts=(
    "dmt"
    "rust"
    "geth"
    "swarm"
    "parity"
  )

  if [ -z "$1" ]; then
    arg="dmt"
  else
    arg="$1"
    shift
  fi

  local matching_opt=''
  opts_matcher matching_opt "$arg" "${opts[@]}"
  if [ $? -ne 0 ]; then # error
    return
  fi

  case "$matching_opt" in
    dmt)
      dmt update "$@"
      ;;

    rust)
      update_rust "$@"
      ;;

    geth)
      update_geth "$@"
      ;;

    swarm)
      update_swarm "$@"
      ;;

    parity)
      update_parity  "$@"
      ;;
  esac
}

function install_n {
  curl -L https://git.io/n-install | bash
  echo "Now quit session and login again, then install 'n v8.11.3'"
}

# ----------------------------- APPLICATIONS -----------------------------

# ETHEREUM

function cdgeth {
  cd "$GOPATH/src/github.com/ethereum/go-ethereum"
}

function cdgo {
  cd "$GOPATH/src"
}

function pull_geth {
  cdgeth
  git pull
  latest_tag
}

function update_geth {
  if [ ! -d "$GOPATH/src/github.com/ethereum/go-ethereum" ]; then
    printf "${MAGENTA}geth not installed, installing [please wait] ...${NC}\n"
    go get -d github.com/ethereum/go-ethereum
    update_geth # checkout the latest tag now and compile
  else
    pull_geth
    go install -v ./cmd/geth
  fi
}

function update_swarm {
  pull_geth
  go install -v ./cmd/swarm
}

function install_node {
  curl -L https://git.io/n-install | bash
}

function install_parity {
  echo "If it doesn't compile on some machine (for example Digital Ocean droplet), compile elsewhere and copy ./target/release/parity binary over..."
  if [ -d "$HOME/parity-ethereum" ]; then
    printf "${RED}~/Install/parity directory already exists${NC}\n"
  else
    local cwd="`pwd`"
    mkdir -p ~/Install
    cd ~/Install

    sudo apt-get install -y libudev-dev cmake

    git clone https://github.com/paritytech/parity-ethereum.git
    update_parity
    cd "$cwd"
  fi
}

# https://github.com/paritytech/parity-ethereum/tree/stable
function update_parity {
  local cwd="`pwd`"
  cd ~/Install/parity-ethereum
  git fetch
  git reset --hard origin/stable
  #echo "1.27.0" > rust-toolchain
  cargo build --release --features final
  #printf "${YELLOW}set rust version 1.27.0, change this value in update_parity function if build failed${NC}\n"
  cd "$cwd"
}

function install_rust {
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
}

function update_rust {
  rustup update
}


