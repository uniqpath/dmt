#!/bin/bash

DMT_CLI="$DMT_NODE_CORE/dmt-controller/cli/dmt.js"

function dmt {
  if [ -z "$1" ] || [ "$1" == "help" ] || [ "$1" == "version" ]; then
    printf "${MAGENTA}     ∞ DMT ∞${NC}\n"
    printf "${CYAN}Liberate yourself.${NC}\n"
    if [ "$1" != "version" ]; then
      echo
    fi
  fi

  # extract host from @ symbol but replace @all with the name of current network !
  local hosts=""

  local args
  IFS=' ' read -r -a args <<< "$@"

  for arg in "${args[@]}"
  do
    if [ "$arg" == "@all" ]; then
      local network_id=''
      get_current_network network_id
      if [ -n "$network_id" ]; then
        hosts="${hosts} @$network_id"
        shift
      fi
    elif [[ "$arg" == @* ]]; then
      hosts="${hosts} ${arg}"
      shift
    fi
  done

  hosts=$(echo "$hosts" | xargs) # remove trailing whitespace

  declare -a opts=(
    "help"
    "docs"
    "info"
    "status"
    "version"
    "devices"
    "shares"
    "services"
    "providers"
    "update"
    "renew"
    "log"
    "log2"
    "install"
    "start"
    "restart"
    "stop"
    "check"
    "uninstall"
    "bin"
  )

  if dev_machine; then
    declare -a opts_admin=(
      "cd"
    )

    opts=("${opts[@]}" "${opts_admin[@]}")
  fi

  local matching_opt=''
  opts_matcher matching_opt "$1" "${opts[@]}"
  if [ $? -ne 0 ]; then # error
    matching_opt="help" # default
  fi

  shift

  case "$matching_opt" in
    help)
      dmt_help
      ;;

    docs)
      dmt_docs
      ;;

    info)
      if [ -n "$hosts" ]; then
        node "$DMT_CLI" "${hosts}" info "$@"
      else
        node "$DMT_CLI" info "$@"
      fi
      ;;

    log)
      if [ -n "$hosts" ]; then
        node "$DMT_CLI" "${hosts}" log "$@"
      else
        node "$DMT_CLI" log "$@"
      fi
      ;;

    log2)
      dmt_log_old "$@"
      ;;

    shares)
      if [ -n "$hosts" ]; then
        node "$DMT_CLI" "${hosts}" shares "$@"
      else
        node "$DMT_CLI" shares "$@"
      fi
      ;;

    services)
      if [ -n "$hosts" ]; then
        node "$DMT_CLI" "${hosts}" services "$@"
      else
        node "$DMT_CLI" services "$@"
      fi
      ;;

    providers)
      if [ -n "$hosts" ]; then
        node "$DMT_CLI" "${hosts}" providers "$@"
      else
        node "$DMT_CLI" providers "$@"
      fi
      ;;

    version)
      dmt_version
      ;;

    devices)
      dmt_devices "$@"
      ;;

    update) # updates the whole folder, doesn't restart the service
      dmt_update "$@"
      ;;

    renew) # updates the whole folder and restarts the service
      dmt_renew "$@"
      ;;

    install)
      dmt_install "$@"
      ;;

    uninstall)
      dmt_uninstall
      ;;

    start)
      printf "${CYAN}DMT SYSTEM${NC} ${MAGENTA}is starting...${NC}\n\n"
      "${DMT_PATH}/etc/onboot/daemons" start
      printf "\n${GREEN}Daemons should now be running, use ${MAGENTA}dmt check${NC} ${GREEN}for quick self-test.${NC}\n"
      ;;

    restart)
      printf "${CYAN}DMT SYSTEM${NC} ${MAGENTA}is restarting...${NC}\n\n"
      "${DMT_PATH}/etc/onboot/daemons" restart
      printf "\n${GREEN}Daemons restarted, use ${MAGENTA}dmt check${NC} ${GREEN}for quick self-test.${NC}\n"
      ;;

    stop)
      printf "${CYAN}DMT SYSTEM${NC} ${MAGENTA}is stopping...${NC}\n\n"
      "${DMT_PATH}/etc/onboot/daemons" stop
      ;;

    # undocumented:
    flash)
      dmt_flash "$@"
      ;;

    bin)
      dmt_bin "$@"
      ;;

    cd)
      dmt_cd
      ;;
  esac
}

function dmt_help {
  printf "${YELLOW}Info:${NC}\n\n"
  printf "${GREEN}dmt help ${GRAY}shows this help${NC}\n"
  printf "${GREEN}dmt docs ${GRAY}shows documentation in a browser${NC}\n"
  printf "${GREEN}dmt version ${GRAY}shows dmt version${NC}\n"
  echo
  printf "${YELLOW}Management:${NC}\n\n"
  printf "${GREEN}dmt update ${GRAY}or just ${GREEN}update${GRAY} gets the latest version${NC}\n"
  printf "${GREEN}dmt install ${GRAY}spreads dmt to another machine, use ${NC}${WHITE}dmt install --with-user ${GRAY}to include user dir${NC}\n"
  printf "${GREEN}dmt uninstall ${GRAY}disables the package${NC}\n"
}

function dmt_docs {
  open "$DMT_PATH/docs/index.html"
}

function e {

  if [ -z "$1" ]; then
    printf "${YELLOW}Usage:${NC}\n"
    printf "${GREEN}e [command_shortcut] [args]${NC} ${GRAY}executes some of the common .dmt functions by refering to them with only part of the name${NC}\n"
    return
  fi

  declare -a opts=(
    "dmt"
    "esp"
    "devices"
    "gateway_ip"
    "gatewayMac"
    "mac_ping"
    "timer"
    "count"
    "freespace"
    "space"
    "usage"
    "conf"
    "speed"
    "flash"
    "serve"
    "push_notify"
  )

  local matching_opt=''
  opts_matcher matching_opt "$1" "${opts[@]}"
  if [ $? -ne 0 ]; then # error
    return
  fi

  shift
  $matching_opt "$@"
}

function dmt_version {
  printf "${MAGENTA}v$(cat "$DMT_PATH/.version")${NC}\n\n"
  local NUM=$(cat $HOME/.bash_aliases | grep function | wc -l | xargs)
  printf "${WHITE}${NUM} bash functions ${GRAY}\nin ~/.bash_aliases${NC}\n"
}

function dmt_devices {
  devices "$@"
}

function dmt_install {

  # multi install: dmt update dev1 dev2 ... devn
  if [ -n "$2" ]; then
    for dev in "$@"
    do
      dmt_install "$dev"
    done
    return
  fi

  local cwd="`pwd`"
  cd "$DMT_PATH"
  . ./install "from-dmt-install" "$@" # calling with . preserves the newly loaded env
  cd "$cwd"
}

function dmt_update {
  if [ -z "$1" ] || [ "$1" == "--with-temp" ]; then
    if dev_machine; then
      printf "${RED}Prevented on dev machine${NC}\n"
    fi
  elif [ "$1" == "devices" ] || [ "$1" == "all" ]; then
    for_all_devices "update"
  else
    dmt_install "$@"
  fi
}

function u {
  dmt_update "$@"
}

function re {
  dmt_renew "$@"
}

function dmt_renew {
  if [ "$1" == "devices" ] || [ "$1" == "all" ]; then
    dmt_update all
    dmt_restart all
  else
    # multi install: dmt renew dev1 dev2 ... devn
    if [ -n "$2" ]; then
      for dev in "$@"
      do
        dmt_renew "$dev"
      done
      return
    fi

    dmt_update "$1"
    dmt_restart "$1"
  fi
}

function dmt_restart {
  local cmd="source ~/.dmt/etc/.bash_aliases_slim && se \\\"if [ -f ~/.dmt/user/devices/this/before-renew ]; then ~/.dmt/user/devices/this/before-renew; fi; ~/.dmt/etc/onboot/daemons restart\\\""

  if [ "$1" == "devices" ] || [ "$1" == "all" ]; then
    for_all_devices exec "$cmd"
  else
    local host="$1"

    if [ "$host" == "ap" ]; then
      host="$DMT_AP_DEFAULT_HOST"
    else
      local matching_host=''
      get_full_host matching_host "$host"
      if [ $? -ne 1 ]; then # not error
        host="$matching_host"
      fi
    fi

    if [ -n "$host" ]; then
      remote -h "$host" "$cmd"
    else
      printf "${RED}Unknown host${NC}\n"
    fi
  fi
}

function dmt_uninstall {
  if dev_machine; then
    printf "${RED}Prevented on dev machine${NC}\n"
    return
  fi

  local backup_file="$HOME/.bash_aliases-backup-by-dmt"

  if [ -L "$LOGNAME_HOME/.bash_aliases" ] && [ "$(head -3 $LOGNAME_HOME/.bash_aliases | tail -1)" == "# DMT ALIASES" ]; then
    rm ~/.bash_aliases

    if [ -f "$backup_file" ]; then
      mv "$backup_file" ~/.bash_aliases
    fi

    printf "${MAGENTA}dmt${NC} ${CYAN}was unlinked${NC}, only the folder ${CYAN}~/.dmt${NC} remains and is not active in any way.\n"
    echo
    printf "${CYAN}To reinstall${NC}\n"
    printf "${GREEN}cd $HOME/.dmt${NC}\n"
    printf "${GREEN}./install here${NC}\n"
    echo
    printf "${CYAN}To remove the unused directory${NC}\n"
    printf "${GREEN}rm -rf $HOME/.dmt${NC}\n"
    echo
    printf "${CYAN}To install on a fresh system${NC}\n"
    printf "${GREEN}curl -L https://uniqpath.com/dmt_install | bash${NC}\n"
    echo
    printf "${WHITE}If you want to confirm that dmt is uninstalled you have to first reload the shell.${NC}\n"
  else
    printf "${RED}dmt is not installed${NC}\n"
  fi
}

function dmt_log_old {
  declare -a opts=(
    "dmt-controller"
    "search-and-play"
  )

  local matching_opt=''
  opts_matcher matching_opt "$1" "${opts[@]}"
  if [ $? -ne 0 ]; then # error
    matching_opt="dmt-controller" # default
  fi

  shift

  tail -f -n 200 "$DMT_PATH/log/${matching_opt}.log"
}


function dmt_cd {
  cd "$DMT_PATH"
}

function dmt_bin {
  declare -a opts=(
    "compile"
    "download"
  )

  if [ -z "$1" ] || [ "$1" == "-h" ]; then
    printf "${YELLOW}Usage:${NC}\n"
    echo "${opts[@]}"
    return
  fi

  local matching_opt=''
  opts_matcher matching_opt "$1" "${opts[@]}"
  if [ $? -ne 0 ]; then # error
    printf "Use -h to see valid options\n\n"
    #matching_opt="aaa" # default
    return
  fi

  shift

  case "$matching_opt" in
    compile)
      if [ -d $DMT_RUST_CORE ]; then
        dmt_compile_bin
      else
        echo "rust core doesn't exists"
      fi
      ;;

    download)
      ;;
  esac
}

function dmt_compile_bin {
  local cwd="`pwd`"

  # todo: ... + generalize the process somehow....

  printf "${MAGENTA}$DMT_RUST_CORE/walkdir${NC}\n"
  if [ -d "$DMT_RUST_CORE/walkdir" ]; then
    cd "$DMT_RUST_CORE/walkdir"
    cargo build --release --example walkdir
    if [ "$?" -eq 0 ]; then
      mkdir -p "${DMT_PLATFORM_BIN}"
      # https://stackoverflow.com/questions/8139885/shellscript-action-if-two-files-are-different
      if ! cmp target/release/examples/walkdir "${DMT_PLATFORM_BIN}/walkdir" >/dev/null 2>&1; then
        printf "${GREEN}✓ Build successful, copying executable to ${DMT_PLATFORM_BIN}${NC}\n"
        cp target/release/examples/walkdir "${DMT_PLATFORM_BIN}"
      else
        printf "${CYAN}✓ Build successful but executable in ${DMT_PLATFORM_BIN} is already the newest version${NC}\n"
      fi
    fi
  fi

  echo

  printf "${MAGENTA}$DMT_RUST_CORE/walksearch${NC}\n"
  if [ -d "$DMT_RUST_CORE/walksearch" ]; then
    cd "$DMT_RUST_CORE/walksearch"
    cargo build --release
    if [ "$?" -eq 0 ]; then
      mkdir -p "${DMT_PLATFORM_BIN}"
      # https://stackoverflow.com/questions/8139885/shellscript-action-if-two-files-are-different
      if ! cmp target/release/walksearch "${DMT_PLATFORM_BIN}/walksearch" >/dev/null 2>&1; then
        printf "${GREEN}✓ Build successful, copying executable to ${DMT_PLATFORM_BIN}${NC}\n"
        cp target/release/walksearch "${DMT_PLATFORM_BIN}"
      else
        printf "${CYAN}✓ Build successful but executable in ${DMT_PLATFORM_BIN} is already the newest version${NC}\n"
      fi
    fi
  fi

  cd "$cwd"
}

