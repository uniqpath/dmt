#!/bin/bash

DMT_CLI="$DMT_NODE_CORE/dmt-controller/cli/dmt.js"

function dmt {
  if [ -z "$1" ] || [ "$1" == "help" ] || [ "$1" == "version" ]; then
    printf "${MAGENTA}     ∞ DMT ∞${NC}\n"
    printf "${CYAN}Liberate yourself.${NC}\n"
    if [ "$1" != "version" ]; then
      echo
    fi
  fi

  # extract host from @ symbol but replace @all with the name of current network !
  local hosts=""

  local args
  IFS=' ' read -r -a args <<< "$@"

  for arg in "${args[@]}"
  do
    if [ "$arg" == "@all" ]; then
      local network_id=''
      get_current_network network_id
      if [ -n "$network_id" ]; then
        hosts="${hosts} @@$network_id"
        shift
      fi
    elif [[ "$arg" == @* ]]; then
      hosts="${hosts} ${arg}"
      shift
    fi
  done

  hosts=$(echo "$hosts" | xargs) # remove trailing whitespace

  declare -a opts=(
    "help"
    "docs"
    "info"
    "status"
    "version"
    "device"
    "services"
    "next"
    "core"
    "update"
    "debug"
    "renew"
    "remove"
    "log"
    "log2"
    "install"
    "start"
    "restart"
    "stop"
    "check"
    "deactivate"
    "remove"
    "bin"
    "music"
    "search"
  )

  if dev_machine; then
    declare -a opts_admin=(
      "cd"
    )

    opts=("${opts[@]}" "${opts_admin[@]}")
  fi

  local matching_opt=''
  opts_matcher matching_opt "$1" "${opts[@]}"
  if [ $? -ne 0 ]; then # error
    if [ -z "$hosts" ]; then
      printf "Try ${GREEN}dmt help${NC}.\n"
      if [ -z "$1" ]; then
        echo
        printf "${CYAN}This device info:${NC}\n\n"
        if [ ! -f "$DMT_DEVICE_FILE" ]; then
          printf "${RED}Reminder ● ${GRAY}you still need to configure this device ● ${CYAN}please run → \n\n${GREEN}  dmt device config${NC}\n\n"
          return
        fi
      fi
    fi

    if [ -z "$1" ]; then
      matching_opt="info"
    else
      return
    fi
  fi

  shift

  case "$matching_opt" in
    help)
      dmt_help
      ;;

    docs)
      dmt_docs
      ;;

    info)
      if [ -n "$hosts" ]; then
        node "$DMT_CLI" "${hosts}" info "$@"
      else
        node "$DMT_CLI" info "$@"
      fi
      ;;

    debug)
      local markerfile="$DMT_STATE/.debug-mode"
      if [ -z "$1" ] || [ "$1" == "on" ] || [ "$1" == "enable" ]; then
        if [ -f "$markerfile" ]; then
          printf "${GRAY}Debug mode ${YELLOW}was already enabled${NC}\n"
        else
          touch "$markerfile"
          printf "${YELLOW}Debug mode ⚙️  enabled${NC}\n"
        fi
      fi

      if [ "$1" == "off" ] || [ "$1" == "disable" ] || [ "$1" == "stop" ]; then
        if [ -f "$markerfile" ]; then
          rm "$markerfile"
          printf "${GREEN}Debug mode disabled 🏄${NC}\n"
        else
          printf "${GRAY}Debug mode was already disabled${NC}\n"
        fi
      fi
      ;;

    search)
      if [ -n "$hosts" ]; then
        search "${hosts}" "$@"
      else
        search "$@"
      fi
      ;;

    music)
      if [ -n "$hosts" ]; then
        m "${hosts}" "$@"
      else
        m "$@"
      fi
      ;;

    log)

      declare -a opts=(
        "dmt-controller"
        "dmt-search"
        "dmt-player"
        "controller"
        "search"
        "player"
      )

      if [ "$1" == "-h" ]; then
        printf "${YELLOW}All logs:${NC}\n"

        for service in "${opts[@]}"
        do
          printf "\n${MAGENTA}${service}${NC}\n"
          if [ "$service" == "dmt-controller" ]; then
            printf "${CYAN}  default + special because:\n"
            printf "${CYAN}    a) you can call it on remote devices, example: ${GRAY}dmt ${GREEN}@host ${GRAY}log${NC}\n"
            printf "${CYAN}    b) you can only call it via rpc (even on local device)${NC}\n"
          fi
        done
        return
      fi

      local matching_opt=''
      opts_matcher matching_opt "$1" "${opts[@]}"

      if [ $? -ne 0 ]; then # error
        if [ -n "$1" ]; then # error
          printf "${RED}Unknown log: ${1}${NC}\n"
          return
        else
          matching_opt="dmt-controller" # default
        fi
      fi

      if [ "$matching_opt" == "controller" ]; then
        matching_opt="dmt-controller"
      fi

      if [ "$matching_opt" == "search" ]; then
        matching_opt="dmt-search"
      fi

      if [ "$matching_opt" == "player" ]; then
        matching_opt="dmt-player"
      fi

      shift

      case "$matching_opt" in

        dmt-controller)
          if [ -n "$hosts" ]; then
            node "$DMT_CLI" "${hosts}" log "$@"
          else
            node "$DMT_CLI" log "$@"
          fi
          ;;

        dmt-search)
          local logfile="$DMT_PATH/log/dmt-search.log"
          if [ -f "$logfile" ]; then
            tail -f "$logfile"
          else
            printf "${RED}${logfile} is missing${NC}\n"
          fi
          ;;

        dmt-player)
          local logfile="$DMT_PATH/log/dmt-player.log"
          if [ -f "$logfile" ]; then
            tail -f "$logfile"
          else
            printf "${RED}${logfile} is missing${NC}\n"
          fi
          ;;

      esac

      ;;

    # shares)
    #   if [ -n "$hosts" ]; then
    #     node "$DMT_CLI" "${hosts}" shares "$@"
    #   else
    #     node "$DMT_CLI" shares "$@"
    #   fi
    #   ;;

    services)
      if [ -n "$hosts" ]; then
        node "$DMT_CLI" "${hosts}" services "$@"
      else
        node "$DMT_CLI" services "$@"
      fi
      ;;

    # provider)
    #   if [ -n "$hosts" ]; then
    #     node "$DMT_CLI" "${hosts}" provider "$@"
    #   else
    #     node "$DMT_CLI" provider "$@"
    #   fi
    #   ;;

    # providers)
    #   if [ -n "$hosts" ]; then
    #     node "$DMT_CLI" "${hosts}" providers "$@"
    #   else
    #     node "$DMT_CLI" providers "$@"
    #   fi
    #   ;;

    version)
      dmt_version
      ;;

    device)

      declare -a opts=(
        "configure"
        "def"
      )

      if [ -z "$1" ] || [ "$1" == "-h" ]; then
        printf "${YELLOW}Usage:${NC}\n"
        echo "${opts[@]}"
        return
      fi

      local matching_opt=''
      opts_matcher matching_opt "$1" "${opts[@]}"
      # if [ $? -ne 0 ]; then # error
      #   #printf "Use -h to see valid options\n\n"
      #   #matching_opt="aaa" # default
      #   #return
      # fi

      shift

      case "$matching_opt" in
        configure)
          local script="$DMT_SCRIPTS/setup_device"
          if [ -f "$script" ]; then
            "$script"
          fi
          return
          ;;

        def)
          printf "${YELLOW}Showing parsed defice definition:${NC}\n"
          ;;
      esac

      local cli="$DMT_NODE_CORE/dmt-controller/cli/device.js"
      if [ -n "$hosts" ]; then
        node "$cli" "${hosts}" "$@"
      else
        node "$cli" "$@"
      fi
      #dmt_devices "$@"
      ;;

    next)
      dmt_next
      ;;

    core)
      dmt_core "$@"
      ;;

    update) # updates the whole folder, doesn't restart the service
      dmt_update "$@"
      ;;

    renew) # updates the whole folder and restarts the service
      dmt_renew "$@"
      ;;

    remove)
      dmt_remove
      ;;

    install)
      dmt_install "$@"
      ;;

    deactivate)
      dmt_deactivate
      ;;

    start)
      printf "${CYAN}DMT SYSTEM${NC} ${MAGENTA}is starting...${NC}\n\n"
      "${DMT_PATH}/etc/onboot/daemons" start
      printf "\n${GRAY}Daemons should now be running, use ${GREEN}dmt log ${GRAY}to see if true.${NC}\n"
      ;;

    restart)
      printf "${CYAN}DMT SYSTEM${NC} ${MAGENTA}is restarting...${NC}\n\n"
      "${DMT_PATH}/etc/onboot/daemons" restart
      printf "\n${GRAY}Daemons restarted, use ${GREEN}dmt log${NC} ${GRAY}to see the dmt-controller log.${NC}\n"
      ;;

    stop)
      printf "${CYAN}DMT SYSTEM${NC} ${MAGENTA}is stopping...${NC}\n\n"
      "${DMT_PATH}/etc/onboot/daemons" stop
      ;;

    # undocumented:
    flash)
      dmt_flash "$@"
      ;;

    bin)
      dmt_bin "$@"
      ;;

    cd)
      dmt_cd
      ;;

  esac
}

function dmt_help {
  printf "${YELLOW}Info:${NC}\n"
  printf "${GREEN}dmt help ${GRAY}shows this help${NC}\n"
  printf "${GREEN}dmt docs ${MAGENTA}shows documentation in a browser${NC}\n"
  printf "${GREEN}dmt version ${GRAY}shows dmt version, like v$(cat "$DMT_PATH/.version")${NC}\n"
  printf "${GREEN}dmt device ${GRAY}device configuration${NC}\n"
  echo
  printf "${YELLOW}Unix background processes:\n${NC}"
  printf "${CYAN}■ services will not persist after reboot — ${MAGENTA}use the docs${CYAN} to easily configure this.${NC}"
  echo
  printf "${GREEN}dmt start ${GRAY}starts the background services 💡🚀🎸${NC}\n"
  printf "${GREEN}dmt stop ${GRAY}self-describing${NC}\n"
  printf "${GREEN}dmt restart ${GRAY}self-describing${NC}\n"
  echo
  printf "${GREEN}dmt info ${GRAY}gets information about current device${NC}\n"
  printf "${GREEN}dmt @hostOrIp info ${GRAY}gets information about a device on local network${NC}\n"
  printf "${GREEN}dmt @@remoteIpOrHost info ${GRAY}gets information about remote device on the other side of router WAN port${NC}\n"
  echo
  printf "${GREEN}dmt log ${GRAY}gets latest log of recent activity (only if daemons are running)${NC}\n"
  printf "${GREEN}dmt @hostOrIp log ${GRAY}self-describing${NC}\n"
  printf "${GREEN}dmt @@remoteIpOrHost log ${GRAY}self-describing${NC}\n"
  echo
  printf "${YELLOW}Spreading and dissemination:${NC}\n"
  printf "${GREEN}dmt next ${GRAY}gets the latest code from public repo on github (DMT SYSTEM never auto-updates)${NC}\n"
  printf "${GREEN}dmt update [host] ${GRAY}or ${GREEN}dmt install [host] ${GRAY}clones dmt to another machine of yours (via SSH)${NC}\n"
  printf "${GREEN}dmt deactivate ${GRAY}deactivates shell but keep it present (to get it back just do ${CYAN}./install${GRAY})${NC}\n"
  printf "${GREEN}dmt remove ${GRAY}self-destroys on this machine (except the user definitions and data)${NC}\n"
}

function dmt_docs {
  if [ -f ~/.dmt/docs/index.html ]; then
    open ~/.dmt/docs/index.html
  else
    printf "${RED}Docs missing${NC}\n"
  fi
  #open https://github.com/uniqpath/dmt/blob/master/docs/README.md
}

function e {

  if [ -z "$1" ]; then
    printf "${YELLOW}Usage:${NC}\n"
    printf "${GREEN}e [command_shortcut] [args]${NC} ${GRAY}executes some of the common .dmt functions by refering to them with only part of the name${NC}\n"
    return
  fi

  declare -a opts=(
    "dmt"
    "esp"
    "devices"
    "gateway_ip"
    "gatewayMac"
    "mac_ping"
    "timer"
    "count"
    "freespace"
    "space"
    "usage"
    "conf"
    "speed"
    "flash"
    "serve"
    "push_notify"
  )

  local matching_opt=''
  opts_matcher matching_opt "$1" "${opts[@]}"
  if [ $? -ne 0 ]; then # error
    return
  fi

  shift
  $matching_opt "$@"
}

function dmt_version {
  printf "${MAGENTA}v$(cat "$DMT_PATH/.version")${NC}\n\n"
  local NUM=$(cat $HOME/.bash_aliases | grep function | wc -l | xargs)
  printf "${WHITE}${NUM} bash functions ${GRAY}\nin ~/.bash_aliases${NC}\n"
}

function dmt_devices {
  devices "$@"
}

function dmt_next {
  if dev_machine; then
    printf "${RED}Prevented on dev machine${NC}\n"
    return
  fi

  local cwd="`pwd`"

  cd "$DMT_PATH"
  git fetch
  git reset --hard origin/master

  if [ -d "./core/.git" ]; then
    cd core
    git fetch
    git reset --hard origin/master
    cd ..
  fi

  if [ -d "./bin/.git" ]; then
    cd bin
    git fetch
    git reset --hard origin/master
    cd ..
  fi

  if [ -d "$DMT_NODE_CORE/.scripts" ]; then
    cd "$DMT_NODE_CORE/.scripts"
    ./symlink_dmt_deps
  fi

  rel

  cd "$cwd"
}

function dmt_core {
  printf "${MAGENTA}CURRENT DMT-CORE REPO${NC}\n"
  cat "$DMT_CORE/.git/config" | grep "url ="

  if [ -z "$1" ] || [ "$1" == "-h" ]; then
    printf "${YELLOW}Usage:${NC}\n"
    printf "${GREEN}dmt core [handle]${NC} ${GRAY}replaces current core with the one at github.com/[handle]/dmt${NC}\n"
    return
  fi

  local DMT_CORE_BACKUP="$DMT_PATH/cores_extra/prev-core-backup"

  if [ -d "$DMT_CORE_BACKUP" ]; then
    rm -rf "$DMT_CORE_BACKUP"
  fi

  mkdir -p "$DMT_CORE_BACKUP"

  if [ -d "$DMT_CORE" ]; then
    printf "${GRAY}Backing up current core to ${YELLOW}${DMT_CORE_BACKUP}${NC}\n"
    mv "$DMT_CORE" "$DMT_CORE_BACKUP"
  fi

  local cwd="`pwd`"

  cd "$DMT_PATH"
  git clone "https://github.com/${1}/dmt-core" core

  if [ -d "$DMT_NODE_CORE/.scripts" ]; then
    cd "$DMT_NODE_CORE/.scripts"
    ./symlink_dmt_deps
  fi

  dmt_core "-h"

  cd "$cwd"
}

function dmt_install {

  # multi install: dmt update dev1 dev2 ... devn
  if [ -n "$2" ]; then
    for dev in "$@"
    do
      dmt_install "$dev"
    done
    return
  fi

  local cwd="`pwd`"
  cd "$DMT_PATH"
  . ./install "from-dmt-install" "$@" # calling with . preserves the newly loaded env
  cd "$cwd"
}

function dmt_update {
  if [ -z "$1" ]; then
    if dev_machine; then
      printf "${RED}Prevented on dev machine${NC}\n"
    fi
  elif [ "$1" == "devices" ] || [ "$1" == "all" ]; then
    for_all_devices "update"
  else
    dmt_install "$@"
  fi
}

function u {
  dmt_update "$@"
}

function re {
  dmt_renew "$@"
}

function dmt_renew {
  if [ "$1" == "devices" ] || [ "$1" == "all" ]; then
    dmt_update all
    dmt_restart all
  else
    # multi install: dmt renew dev1 dev2 ... devn
    if [ -n "$2" ]; then
      for dev in "$@"
      do
        dmt_renew "$dev"
      done
      return
    fi

    dmt_update "$1"
    dmt_restart "$1"
  fi
}

function dmt_remove {
  printf "${GRAY}Please copy and execute:${NC}\n\n"
  printf "1) ${GREEN}dmt deactivate${NC}\n"
  printf "2) ${RED}rm -rf ~/.dmt${NC}\n"
}

function dmt_restart {
  local cmd="source ~/.dmt/etc/.bash_aliases_slim && se \\\"if [ -f ~/.dmt/user/devices/this/before-renew ]; then ~/.dmt/user/devices/this/before-renew; fi; ~/.dmt/etc/onboot/daemons restart\\\""

  if [ "$1" == "devices" ] || [ "$1" == "all" ]; then
    for_all_devices exec "$cmd"
  else
    local host="$1"

    if [ "$host" == "ap" ]; then
      host="$DMT_AP_DEFAULT_HOST"
    else
      local matching_host=''
      get_full_host matching_host "$host"
      if [ $? -ne 1 ]; then # not error
        host="$matching_host"
      fi
    fi

    if [ -n "$host" ]; then
      remote -h "$host" "$cmd"
    else
      printf "${RED}Unknown host${NC}\n"
    fi
  fi
}

function dmt_deactivate {
  if dev_machine; then
    printf "${RED}Prevented on dev machine${NC}\n"
    return
  fi

  local backup_file="$HOME/.bash_aliases-backup-by-dmt"

  if [ -L "$LOGNAME_HOME/.bash_aliases" ] && [ "$(head -3 $LOGNAME_HOME/.bash_aliases | tail -1)" == "# DMT ALIASES" ]; then
    rm ~/.bash_aliases

    if [ -f "$backup_file" ]; then
      mv "$backup_file" ~/.bash_aliases
    fi

    printf "${MAGENTA}dmt${NC} ${CYAN}was unlinked${NC}, only the folder ${CYAN}~/.dmt${NC} remains and is not active in any way.\n"
    echo
    printf "${CYAN}To reinstall${NC}\n"
    printf "${GREEN}cd $HOME/.dmt${NC}\n"
    printf "${GREEN}./install${NC}\n"
    echo
    printf "${CYAN}To remove the unused directory${NC}\n"
    printf "${GREEN}rm -rf $HOME/.dmt${NC}\n"
    echo
    printf "${WHITE}If you want to confirm that dmt is uninstalled you have to first reload the shell.${NC}\n"
  else
    printf "${RED}dmt is not installed${NC}\n"
  fi
}

function dmt_cd {
  cd "$DMT_PATH"
}

function dmt_bin {
  declare -a opts=(
    "compile"
    "download"
  )

  if [ -z "$1" ] || [ "$1" == "-h" ]; then
    printf "${YELLOW}Usage:${NC}\n"
    echo "${opts[@]}"
    return
  fi

  local matching_opt=''
  opts_matcher matching_opt "$1" "${opts[@]}"
  if [ $? -ne 0 ]; then # error
    printf "Use -h to see valid options\n\n"
    #matching_opt="aaa" # default
    return
  fi

  shift

  case "$matching_opt" in
    compile)
      if [ -d $DMT_RUST_CORE ]; then
        dmt_compile_bin
      else
        echo "rust core doesn't exists"
      fi
      ;;

    download)
      ;;
  esac
}

function dmt_compile_bin {
  local cwd="`pwd`"

  # todo: ... + generalize the process somehow....

  printf "${MAGENTA}$DMT_RUST_CORE/walkdir${NC}\n"
  if [ -d "$DMT_RUST_CORE/walkdir" ]; then
    cd "$DMT_RUST_CORE/walkdir"
    cargo build --release --example walkdir
    if [ "$?" -eq 0 ]; then
      mkdir -p "${DMT_PLATFORM_BIN}"
      # https://stackoverflow.com/questions/8139885/shellscript-action-if-two-files-are-different
      if ! cmp target/release/examples/walkdir "${DMT_PLATFORM_BIN}/walkdir" >/dev/null 2>&1; then
        printf "${GREEN}✓ Build successful, copying executable to ${DMT_PLATFORM_BIN}${NC}\n"
        cp target/release/examples/walkdir "${DMT_PLATFORM_BIN}"
      else
        printf "${CYAN}✓ Build successful but executable in ${DMT_PLATFORM_BIN} is already the newest version${NC}\n"
      fi
    fi
  fi

  echo

  printf "${MAGENTA}$DMT_RUST_CORE/walksearch${NC}\n"
  if [ -d "$DMT_RUST_CORE/walksearch" ]; then
    cd "$DMT_RUST_CORE/walksearch"
    cargo build --release
    if [ "$?" -eq 0 ]; then
      mkdir -p "${DMT_PLATFORM_BIN}"
      # https://stackoverflow.com/questions/8139885/shellscript-action-if-two-files-are-different
      if ! cmp target/release/walksearch "${DMT_PLATFORM_BIN}/walksearch" >/dev/null 2>&1; then
        printf "${GREEN}✓ Build successful, copying executable to ${DMT_PLATFORM_BIN}${NC}\n"
        cp target/release/walksearch "${DMT_PLATFORM_BIN}"
      else
        printf "${CYAN}✓ Build successful but executable in ${DMT_PLATFORM_BIN} is already the newest version${NC}\n"
      fi
    fi
  fi

  cd "$cwd"
}

