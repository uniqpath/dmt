#!/bin/bash

DMT_CLI="$DMT_NODE_CORE/dmt-controller/cli/dmt.js"

function dmt {
  if [ -z "$1" ] || [ "$1" == "help" ] || [ "$1" == "version" ]; then
    printf "${MAGENTA}      ‚àû DMT ‚àû${NC}\n"
    printf "${CYAN}Freedom to imagine${NC}\n"
    #printf "${CYAN}${NC}\n"
    echo
  fi

  # dmt [command] @hosts [terms]
  local command=''

  if [[ "$1" != @* ]]; then
    command="$1"
    shift
  fi

  # extract host from @ symbol but replace @all with the name of current network !
  local hosts=""

  local args
  IFS=' ' read -r -a args <<< "$@"

  for arg in "${args[@]}"
  do
    if [ "$arg" == "@all" ]; then
      local network_id=''
      get_current_network network_id
      if [ -n "$network_id" ]; then
        hosts="${hosts} @@$network_id"
        shift
      fi
    elif [[ "$arg" == @* ]] && [[ ! "$arg" =~ = ]]; then # @attr=val should not be treated as hostnames
      hosts="${hosts} ${arg}"
      shift
    fi
  done

  hosts=$(echo "$hosts" | xargs) # remove trailing whitespace

  declare -a opts=(
    "help"
    "test"
    "status"
    "version"
    "device"
    "services"
    "next"
    "core"
    "update"
    "debug"
    "renew"
    "remove"
    "log"
    "logfg"
    "install"
    "start"
    "startfg"
    "restart"
    "restart2"
    "stop"
    "link"
    "unlink"
    "relink"
    "deactivate"
    "remove"
    "bin"
    "music"
    "search"
  )

  if dev_machine; then
    declare -a opts_admin=(
      "cd"
    )

    opts=("${opts[@]}" "${opts_admin[@]}")
  fi

  local matching_opt=''
  opts_matcher matching_opt "$command" "${opts[@]}"
  if [ $? -ne 0 ]; then # error
    if [ -z "$hosts" ]; then
      printf "Try ${GREEN}dmt help${NC} as well.\n"
      if [ -z "$1" ] && [ -n "$proc" ] ; then
        echo
        printf "${CYAN}This device info:${NC}\n\n"
        if [ ! -f "$DMT_DEVICE_FILE" ]; then
          printf "${RED}Reminder ‚óè ${GRAY}you still need to configure this device ‚óè ${CYAN}please run ‚Üí \n\n${GREEN}  dmt device select${NC}\n\n"
          return
        fi
      fi
    fi

    if [ -z "$1" ]; then
      matching_opt="help"
    else
      return
    fi
  fi

  local dmt_proc_pid=''
  local dmt_fg_bg=''
  get_dmt_proc_pid dmt_proc_pid dmt_fg_bg

  local proc_manager=$(ps -ef | grep "dmt-proc" | grep "manager.js" | grep -v "command -v openssl >/dev/null" | grep -v grep | awk '{print $2}')

  if [ -z "$hosts" ]; then # if we're targeting remote hosts, information about our own local process is irrelevant
    if [ "$matching_opt" != "next" ] && [ "$matching_opt" != "start" ] && [ "$matching_opt" != "startfg" ] && [ "$matching_opt" != "debug" ] && [ "$matching_opt" != "device" ]; then
      if [ -n "$dmt_proc_pid" ]; then
        printf "${WHITE}dmt-proc${NC} seems to be running with ${YELLOW}pid ${dmt_proc_pid}${NC}\n"
      elif [ "$matching_opt" != "stop" ] && [ "$matching_opt" != "restart" ]; then
        printf "‚ö†Ô∏è  ${WHITE}dmt-proc${NC} ${RED}does not seem to be running${NC} ${YELLOW}‚Üí use${NC} ${GREEN}dmt start${NC} üöÄ\n"
        if [ -n "$proc_manager" ]; then
          printf ".... ${GREEN}looks like dmt process manager is currently (re)starting ${WHITE}dmt-proc${NC} ....\n"
        fi
      fi
      echo
    fi
  fi
  # ----

  case "$matching_opt" in
    help)
      dmt_help

      echo
      printf "${MAGENTA}Available rpc methods: ${NC}\n\n"

      if [ -n "$hosts" ]; then
        node "$DMT_CLI" "${hosts}" help "$@"

        dmt_help_explain_rpc
      else
        if [ -z "$dmt_proc_pid" ]; then
          printf "${RED}None${NC}\n"
          echo
          printf "Please type ${GREEN}dmt start${NC} to start ${MAGENTA}dmt-proc${NC}.\n"
        else
          node "$DMT_CLI" help "$@"

          dmt_help_explain_rpc
        fi
      fi
      ;;

    test)
      if [ -n "$hosts" ]; then
        node "$DMT_CLI" "${hosts}" test "$@"
      else
        if [ -n "$dmt_proc_pid" ]; then
          node "$DMT_CLI" test "$@"
        fi
      fi
      ;;

    debug)
      local markerfile="$DMT_STATE/.debug-mode"
      if [ -z "$1" ] || [ "$1" == "on" ] || [ "$1" == "enable" ]; then
        if [ -f "$markerfile" ]; then
          printf "${GRAY}‚úì Debug mode was already enabled${NC}\n"
        else
          touch "$markerfile"
          printf "${GREEN}‚úì ${YELLOW}Debug mode ‚öôÔ∏è  enabled${NC}\n"
        fi

        printf "\n${MAGENTA}Micro-Debugging options:${NC}\n"

        printf "\nEdit ${YELLOW}${markerfile}${NC} file to increase debug log level (one line, one category like ${GREEN}mpv${NC}, ${GREEN}lan${NC} etc.) ${GRAY}‚ö†Ô∏è  This will get lost when you execute ${GREEN}dmt debug off${GRAY}.${NC}\n"
        printf "\nTo make it more permanent, add this to device.def ${GRAY}(command:${NC} ${GREEN}dev edit${NC}${GRAY})${NC}:\n"
        printf "${MAGENTA}debug:${NC}\n"
        printf "  ${MAGENTA}log: ${GRAY}mpv${NC}\n"
        printf "  ${MAGENTA}log: ${GRAY}lan${NC}\n"
        printf "  ${MAGENTA}log: ${GRAY}...${NC}\n"
        printf "\n‚ö†Ô∏è  ${GRAY}This, however, requires ${GREEN}dmt restart${GRAY} while editing the ${YELLOW}.debug-mode${GRAY} file does not.${NC}\n"

        echo

        printf "${MAGENTA}Options:${NC}\n"
        printf "${MAGENTA}--------${NC}\n\n"

        printf "${GREEN}mpv${NC} ${GRAY}enables mpv process logging into ~/.dmt/log/mpv.log (requires dmt restart ${NC}while other commands do not!${NC})${NC}\n"
        printf "${GREEN}mpv-ipc${NC} ${GRAY}enables debug messages between ${MAGENTA}dmt-process${NC} ${GRAY}and${NC} ${CYAN}mpv${NC} ${GRAY}process${NC}\n"
        printf "${GREEN}ws${NC} ${GRAY}enables debug messages about websocket connections (port 7780 -- metagui)${NC}\n"
        printf "${GREEN}lan${NC} ${GRAY}enables debug messages about lanbus${NC}\n"
        printf "${GREEN}mqtt-sent${NC} ${GRAY}enables debug messages about sent mqtt messages${NC}\n"
        printf "${GREEN}mqtt-received${NC} ${GRAY}enables debug messages about received mqtt messages${NC}\n"
        printf "${GREEN}beats${NC} ${GRAY}todo${NC}\n"
      fi

      if [ "$1" == "off" ] || [ "$1" == "disable" ] || [ "$1" == "stop" ]; then
        if [ -f "$markerfile" ]; then
          rm "$markerfile"
          printf "${CYAN}Debug mode disabled${NC}\n"
        else
          printf "${GRAY}Debug mode was already disabled${NC}\n"
        fi
      fi
      ;;

    search)
      if [ -n "$hosts" ]; then
        search "${hosts}" "$@"
      else
        search "$@"
      fi
      ;;

    music)
      if [ -n "$hosts" ]; then
        m "${hosts}" "$@"
      else
        m "$@"
      fi
      ;;

    services)
      if [ -n "$hosts" ]; then
        node "$DMT_CLI" "${hosts}" services "$@"
      else
        node "$DMT_CLI" services "$@"
      fi
      ;;

    version)
      dmt_version
      ;;

    device)
      dmt_device "$@"
      ;;

    next)
      dmt_next
      ;;

    update) # updates the whole folder, doesn't restart the service
      dmt_update "$@"
      ;;

    renew) # updates the whole folder and restarts the service
      dmt_renew "$@"
      ;;

    remove)
      dmt_remove
      ;;

    install)
      dmt_install "$@"
      ;;

    deactivate)
      dmt_deactivate
      ;;

    link)
      local cwd="`pwd`"
      cd "$DMT_NODE_CORE/.scripts"
      ./symlink_dmt_deps
      cd "$cwd"
      ;;

    unlink)
      local cwd="`pwd`"
      cd "$DMT_NODE_CORE/.scripts"
      ./symlink_dmt_deps "remove"
      cd "$cwd"
      ;;

    relink) #rarely used, usually "dmt link" is enough for this purpose as well... use "dmt relink" only if suddenly symlinks should point somewewhere else... if just some new symlinks have to be added, there is no need to unlink first, the symlinking script (dmt link) will add what's missing
      dmt unlink
      dmt link
      ;;

    start)
      if report_dmt_running "$dmt_proc_pid" "$dmt_fg_bg"; then
        return
      fi

      symlink_if_unlinked
      #copy_core_bootscripts
      compile_gui_if_missing

      printf "${CYAN}DMT PROCESS${NC} ${MAGENTA}is starting...${NC}\n\n"
      "${DMT_PATH}/etc/onboot/daemons" start

      # see if process is actually running
      local dmt_proc_pid=''
      local dmt_fg_bg=''
      get_dmt_proc_pid dmt_proc_pid dmt_fg_bg

      if [ -n "$dmt_proc_pid" ]; then
        printf "\n${CYAN}dmt-proc${NC} ${GRAY}should now be running, use ${GREEN}dmt log ${GRAY}to see events and information.${NC}\n"
      else
        printf "\n${RED}Problem starting ${CYAN}dmt-proc${RED}, please use ${GREEN}dmt logfg ${RED}to determine the reason${NC}\n"
      fi
      ;;

    startfg) # START FOREGROUND
      if report_dmt_running "$dmt_proc_pid" "$dmt_fg_bg"; then
        return
      fi

      symlink_if_unlinked
      #copy_core_bootscripts
      compile_gui_if_missing

      printf "${MAGENTA}dmt-proc${NC} ${WHITE}is starting in ${CYAN}foreground${NC} ...\n\n"
      node --trace-warnings --experimental-modules "${DMT_NODE_CORE}/dmt-controller/daemons/dmt-proc.js"  --fg # --fg: only for informative purposes to signal that we ran it in foreground as opposed to daemonizing (dmt start)
      ;;

    stop)
      local dmt_proc_pid=''
      local dmt_fg_bg=''
      get_dmt_proc_pid dmt_proc_pid dmt_fg_bg


      if [[ $dmt_fg_bg == 'fg' ]]; then
        printf "${MAGENTA}dmt-proc${NC} ${RED}is already running in 'foreground'${NC}, it was started with ${CYAN}dmt startfg${NC} in another terminal tab.\n"
        printf "${YELLOW}Please go to the other terminal tab and press ${GREEN}CTRL+C${NC}\n"
        echo
        printf "You can also use ${GREEN}sudo kill -9 ${dmt_proc_pid}${NC} to kill the process now.\n"
        return
      fi

      if [ -n "$dmt_proc_pid" ]; then
        printf "${CYAN}DMT PROCESS${NC} ${MAGENTA}is stopping...${NC}\n\n"
        "${DMT_PATH}/etc/onboot/daemons" stop
      else
        printf "${YELLOW}dmt-proc is not currently running ...${NC}\n"
      fi
      ;;

    restart)
      symlink_if_unlinked
      #copy_core_bootscripts
      compile_gui_if_missing

      printf "${CYAN}DMT PROCESS${NC} ${MAGENTA}is restarting...${NC}\n\n"
      "${DMT_PATH}/etc/onboot/daemons" restart
      if [ $? -eq 0 ]; then
        #printf "\n${CYAN}dmt-proc${NC} ${GRAY}restarted, use ${GREEN}dmt log ${GRAY}to see events and information.${NC}\n"
        # see if process is actually running
        local dmt_proc_pid=''
        local dmt_fg_bg=''
        get_dmt_proc_pid dmt_proc_pid dmt_fg_bg

        if [ -n "$dmt_proc_pid" ]; then
          printf "\n${CYAN}dmt-proc${NC} ${GRAY}restarted, use ${GREEN}dmt log ${GRAY}to see events and information.${NC}\n"
        else
          printf "\n${RED}Problem restarting ${CYAN}dmt-proc${RED}, please use ${GREEN}dmt logfg ${RED}to determine the reason${NC}\n"
        fi
      fi
      ;;

    log) # requestion to the service to get latest few log lines
      dmt_log "$@"
      ;;

    logfg) # show log in foreground and keep it updated
      dmt_log fg "$@"
      ;;

    # undocumented:

    flash)
      dmt_flash "$@"
      ;;

    bin)
      dmt_bin "$@"
      ;;

    cd)
      dmt_cd
      ;;

  esac
}

function get_dmt_proc_pid {
  # space in " dmt-proc" is required
  local proc=$(ps -ef | grep " dmt-proc" | grep -v "eslint" | grep -v "manager.js" | grep -v "command -v openssl >/dev/null" | grep -v grep | awk '{print $2}')
  local procFG=$(ps -ef | grep "dmt-controller/daemons/dmt-proc.js" | grep -v "eslint" | grep -v "command -v openssl >/dev/null" | grep -v grep | awk '{print $2}')

  if [ -n "$proc" ]; then
    #ps -ef | grep " dmt-proc" | grep -v "manager.js" | grep -v "command -v openssl >/dev/null" | grep -v grep
    eval "$1='$proc'"
    eval "$2='bg'"
  fi

  # dmt process running in foreground
  if [ -n "$procFG" ]; then
    #ps -ef | grep "dmt-controller/daemons/dmt-proc.js" | grep -v "command -v openssl >/dev/null" | grep -v grep
    eval "$1='$procFG'"
    eval "$2='fg'"
  fi
}

function report_dmt_running {
  local dmt_proc_pid="$1"
  local fg_bg="$2"

  if [ -n "$dmt_proc_pid" ]; then
    local fg_bg_msg=""
    if [ "$fg_bg" == 'fg' ]; then
      fg_bg_msg="${MAGENTA}in foreground${NC} "
    fi
    printf "${WHITE}dmt-proc${NC} ${GREEN}seems to already be running ${fg_bg_msg}with ${YELLOW}pid ${dmt_proc_pid}${NC}\n"
    return 0
  fi

  return 1
}

# warning: duplicated in ~/.dmt/etc/onboot/daemons
function save_dmt_state {
  local dmt_cli="${DMT_NODE_CORE}/dmt-controller/cli/dmt.js"
  if [ -f "$dmt_cli" ]; then
    node "$dmt_cli" save_state
  fi
}

function dmt_device {
  declare -a opts=(
    "cd"
    "select"
    "def"
    "edit"
  )

  if [ -z "$1" ] || [ "$1" == "-h" ]; then
    local device_name=''
    get_current_device device_name

    if [ -n "$device_name" ]; then
      printf "${CYAN}Device name: üí° ${MAGENTA}${device_name}${NC}\n\n"
    else
      printf "${GRAY}This device is ${RED}unnamed ü§î${GRAY}, please name it by running ${GREEN}dmt device select${GRAY} (or shorter: ${GREEN}dev sel${GRAY}).${NC}\n\n"
      return
    fi

    printf "${YELLOW}Usage:${NC}\n"
    printf "${GREEN}cd${NC} ${GRAY}move to directory with curent device's configuration${NC}\n"
    printf "${GREEN}select${NC} ${GRAY}select configuration for this device from existing configurations or create a new configuration and assign it to this device${NC}\n"
    printf "${GREEN}def${NC} ${GRAY}shows parsed device.def definition in json format${NC}\n"
    printf "${GREEN}edit${NC} ${GRAY}edit current device's device.def${NC}\n"
    return
  fi

  local matching_opt=''
  opts_matcher matching_opt "$1" "${opts[@]}"

  shift

  case "$matching_opt" in
    cd)
      device_helper cd
      ;;

    edit)
      device_helper edit
      ;;

    select)
      local script="$DMT_SCRIPTS/setup_device"
      if [ -f "$script" ]; then
        "$script" "$@"
      fi
      ;;

    def)
      printf "${YELLOW}Showing device definition in json format (parsed from .def):${NC}\n"
      local cli="$DMT_NODE_CORE/dmt-controller/cli/device.js"
      if [ -n "$hosts" ]; then
        node "$cli" "${hosts}" "$@"
      else
        node "$cli" "$@"
      fi
      ;;
  esac
}

function dev {
  dmt_device "$@"
}

function device {
  dmt_device "$@"
}

function device_helper {
  if [ -z "$1" ]; then
    printf "${YELLOW}Usage:${NC}\n"
    printf "${GREEN}cd${NC} ${GRAY}${NC}\n"
    printf "${GREEN}edit${NC} ${GRAY}${NC}\n"
    printf "${GREEN}list${NC} ${GRAY}${NC}\n"
    printf "${GREEN}ping${NC} ${GRAY}${NC}\n"
  else
    declare -a opts=(
      "cd"
      "edit"
      "list"
      "ping"
    )

    local matching_opt=''
    opts_matcher matching_opt "$1" "${opts[@]}"
    if [ $? -ne 0 ]; then # error
      printf "${YELLOW}Use ${GREEN}help ${YELLOW}for more options${NC}\n\n"
      #matching_opt="aaa" # default
    fi

    shift

    case "$matching_opt" in
      cd)
        if [ -z "$1" ]; then
          AWESOME_SILENCE=true awesome_cd ~/.dmt/user/devices
          if [ $? -eq 0 ] && [ -d "this/def" ]; then
            cd "this/def"
          fi
        else
          AWESOME_SILENCE=true awesome_cd ~/.dmt/user/devices "$1"

          if [ $? -eq 0 ]; then
            if [ -d "def" ]; then
              cd "def"
            fi
          else
            printf "${RED}not found${NC}\n"
          fi
        fi
        ;;

      edit)
        local dir="${DMT_USER_PATH}/devices/this"
        if [ -d "$dir" ]; then
          local file="${dir}/def/device.def"
          if [ -f "$file" ]; then
            e "$file"
          else
            echo $file
            printf "${RED}device.def file not found${NC}\n"
          fi
        else
          printf "${RED}Device is unknown${GRAY}, please select the definition file by using ${GREEN}dev select${GRAY}, then try again.${NC}\n"
        fi
        ;;

      list)
        for_all_devices "list"
        ;;

      ping)
        for_all_devices
        ;;
    esac
  fi
}

function state {

  if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    printf "${YELLOW}Usage:${NC}\n"
    printf "${GREEN}state${NC} ${GRAY}show program state${NC}\n"
    printf "${GREEN}state [store]${NC} ${GRAY}show a specific store state (controller, player etc.)${NC}\n"
    printf "${GREEN}state [store].[key]${NC} ${GRAY}ex.: player.playlist, controller.weather${NC}\n"
    printf "${GREEN}state purge${NC} ${GRAY}delete program state${NC}\n"
    return
  fi

  local DMT_STATE_FILE="$DMT_PATH/state/program.json"

  if [ -f "$DMT_STATE_FILE" ]; then
    if [ "$1" == "purge" ]; then
      if [ -f "$DMT_STATE_FILE" ]; then
        #dmt stop
        rm "$DMT_STATE_FILE"
        printf "${GREEN}purged dmt state${NC}\n"
        #dmt start
      fi
    else
      if [ -n "$1" ]; then
        cat "${DMT_STATE_FILE}" | jq ".$1"
      else
        cat "${DMT_STATE_FILE}" | jq
      fi
    fi
  else
    printf "${YELLOW}dmt state not found on disk${NC}\n"
  fi
}

function gui_build_all {
  local cwd="`pwd`"

  local base_dir="$DMT_PATH/core/node/dmt-gui/gui-frontend-core"

  cd "$base_dir"

  for component in *; do
    if [ -d "$component" ] && [ "$component" != "common_assets" ]; then
      cd $component
      if [ -f "package.json" ]; then
        npm run build
      else
        printf "${GREEN}Gui component ${YELLOW}${component}${NC} ${GREEN}not buildable in isolation, it was probably (hopefuly) included from some other components...${NC}\n"
      fi
    fi
    cd "$base_dir"
  done

  cd "$cwd"
}

function gui_send_action_to_frontend {
  local action="$1"
  local payload
  if [ -n "$2" ]; then
    #action="${action}:${2}"
    payload="$2"
  fi
  node "${backendDir}/ws_servers/index.js" localhost "$action" gui "$payload"
}

function gui {
  local dir="$DMT_PATH/core/node/dmt-gui/gui-frontend-core"
  local backendDir="$DMT_PATH/core/node/dmt-gui/gui-backend"

  local option="$1"

  if [ -z "$option" ]; then
    printf "${YELLOW}Usage:${NC}\n"
    printf "${GREEN}gui cd [gui]${NC} ${GRAY}${NC}\n"
    printf "${GREEN}gui run [gui]${NC} ${GRAY}${NC}\n"
    printf "${GREEN}gui build${NC} ${GRAY}build all GUIs${NC}\n"
    printf "${GREEN}gui build [gui]${NC} ${GRAY}${NC}\n"
    printf "${GREEN}gui reload${NC} ${GRAY}send request to frontend via websocket requesting refresh of current url${NC}\n"
    printf "${GREEN}gui reload [view]${NC} ${GRAY}reloads the specified gui view (home, player, debug etc.)${NC}\n"
    printf "${GREEN}gui switch [ip]${NC} ${GRAY}switches gui to specified IP (todo: use deviceId instead of ip)${NC}\n"
    printf "${GREEN}gui debug${NC} ${GRAY}shows debugging info for current gui issues troubleshooting${NC}\n"
    return
  fi

  shift

  case "$option" in
    cd)
      awesome_cd "$dir" "$1"
      if [ $? -eq 0 ] && [ -d "src" ]; then
        cd "src"
      fi
      ;;

    reload)
      local view="$1"
      gui_send_action_to_frontend "reload" "$view"
      ;;

    switch)
      local ip="$1"
      gui_send_action_to_frontend "switch" "$ip"
      ;;

    run)
      symlink_if_unlinked

      if [ -z "$1" ]; then
        gui run app
      elif [ "$1" == "." ]; then
        npm run dev
      else
        awesome_cd "$dir" "$1"
        if [ $? -eq 0 ]; then
          npm run dev
        fi
      fi
      ;;

    build)
      symlink_if_unlinked

      if [ -z "$1" ]; then
        gui build app
        #gui_build_all
        return
      fi

      awesome_cd "$dir" "$1"
      if [ $? -eq 0 ]; then
        npm run build
      fi
      ;;

    debug)
      echo "TODO"
      ;;

    *)
      awesome_cd "$dir" "$option"
      ;;
  esac
}

function dmt_log {
  local foreground=false

  if [ "$1" == "-h" ]; then
    printf "${YELLOW}Usage:${NC}\n"
    printf "${GREEN}dmt log${NC} ${GRAY}get last 10 log lines on this machine${NC}\n"
    printf "${GREEN}dmt @host log${NC} ${GRAY}get last 10 log lines for remote machine${NC}\n"
    printf "${GREEN}dmt logfg${NC} ${GRAY}local log in foreground (updates are visible as they come)${NC}\n"
    return
  fi

  local logfile="$DMT_PATH/log/dmt.log"

  if [ "$1" == "fg" ]; then
    # ISSUE: 1) dmt logfg 2) COMMAND+K (clear screen) 3) renew device.. 4) PROBLEM: even older log messages will be shown
    tail -f -n 100 "$logfile"
  else
    if [ -n "$hosts" ]; then
      node "$DMT_CLI" "${hosts}" log "$@"
    else
      node "$DMT_CLI" log "$@"
    fi
  fi
}

function dmt_help {
  printf "${YELLOW}Basic info:${NC}\n"
  printf "${GREEN}dmt help ${GRAY}shows this help screen${NC}\n"
  #printf "${GREEN}dmt docs ${MAGENTA}shows documentation in a browser${NC}\n"
  printf "${GREEN}dmt version ${GRAY}shows dmt version ‚Äî v$(cat "$DMT_PATH/.version")${NC}\n"
  printf "${GREEN}dmt device ${GRAY}device configuration and information${NC}\n"

  echo
  printf "${YELLOW}Clone to more of your devices:${NC}\n"
  printf "${GREEN}dmt next ${GRAY}gets the latest code from The Source (dmt-system.com)${NC}\n"
  printf "${GREEN}dmt update [host] ${GRAY}or ${GREEN}dmt install [host] ${GRAY}clones dmt to another machine of yours (via SSH)${NC}\n"
  printf "${GREEN}dmt deactivate ${GRAY}deactivates shell but keep it present (to get it back just do ${CYAN}./install${GRAY})${NC}\n"
  printf "${GREEN}dmt remove ${GRAY}self-destroys on this machine (except the user definitions and data)${NC}\n"
  printf "From another machine: ${MAGENTA}curl [thisMachineIp]:1111 | bash ${GRAY}replicates ~/.dmt directory (without ~/.dmt/user) from this to another machine${NC}\n"
  echo
  printf "${MAGENTA}dmt-proc ${YELLOW}management:\n${NC}"
  printf "${CYAN}‚ñ† services will not persist after reboot ‚Äî ${MAGENTA}use the docs${CYAN} to easily configure this.${NC}"
  echo
  printf "${GREEN}dmt start ${GRAY}starts the background process ${MAGENTA}(dmt-proc)${NC} üí°üöÄüé∏${NC}\n"
  printf "${GREEN}dmt startfg ${GRAY}(only used in special cases when testing or developing) starts the services in current terminal (foreground) and quits when terminal is closed${NC}\n"
  printf "${GREEN}dmt stop ${GRAY}stops the process${NC}\n"
  printf "${GREEN}dmt restart ${GRAY}restarts the process${NC}\n"
  printf "${GREEN}dmt logfg ${GRAY}shows log in current tab (to get last few lines use ${GREEN}dmt log${GRAY} - makes a rpc call, see below)${NC}\n"
}

function dmt_help_explain_rpc {
  echo
  printf "${CYAN}A general example of using a rpc method either on localhost or some other device:${NC}\n"
  echo
  printf "${GREEN}dmt info ${GRAY}gets information about current device${NC}\n"
  printf "${GREEN}dmt @hostOrIp info ${GRAY}gets information about a device on local network${NC}\n"
  # printf "${GREEN}dmt @@remoteIpOrHost info ${GRAY}gets information about remote device on the other side of router WAN port${NC}\n"
  echo
  printf "${GRAY}You can do the same with all other rpc methods listed above.${NC}\n"
}

function dmt_version {
  printf "${MAGENTA}v$(cat "$DMT_PATH/.version")${NC}\n\n"
  local NUM=$(cat $HOME/.bash_aliases | grep function | wc -l | xargs)
  printf "${WHITE}${NUM} bash functions ${GRAY}\nin ~/.bash_aliases${NC}\n"
}

function get_dmt_source {
  local _gatewayMac=''
  get_gateway_mac _gatewayMac

  if [ "$_gatewayMac" == "$LOCAL_DMT_SOURCE_MAC" ]; then
    eval "$1='local'"
    #printf "${GREEN}LOCAL${NC}\n"
  else
    eval "$1='global'"
    #printf "${MAGENTA}GLOBAL${NC}\n"
  fi
  #printf "${YELLOW}$_gatewayMac${NC}\n"
}

function stop_dmt_if_running {
  local dmt_proc_pid=''
  local dmt_fg_bg=''
  get_dmt_proc_pid dmt_proc_pid dmt_fg_bg

  if [ -n "$dmt_proc_pid" ]; then
    dmt stop
  fi
}

function dmt_next {
  if dev_machine; then
    printf "${RED}Prevented on dev machine${NC}\n"
    return
  fi

  stop_dmt_if_running

  local before_next_backup_dir="$HOME/.dmt-backup-before-next"

  if [ -d "$before_next_backup_dir" ]; then
    printf "${RED}Aborting due to existing directory - ${before_next_backup_dir} ${NC}\n"
    return
  fi

  if [ -d "$DMT_PATH" ]; then
    printf "${YELLOW}Moving $DMT_PATH to ${before_next_backup_dir}...${NC}\n"
    mv "$DMT_PATH" "$before_next_backup_dir"
  fi

  cd "$HOME"

  local dmt_source=''
  get_dmt_source dmt_source

  if [ $dmt_source == 'local' ]; then
    printf "${GREEN}Fetching from ${YELLOW}${LOCAL_DMT_SOURCE_ENDPOINT}${NC} ...\n\n"
    curl "$LOCAL_DMT_SOURCE_ENDPOINT" | bash
  else
    printf "${CYAN}Fetching from ${MAGENTA}dmt-system.com${NC} ...\n\n"
    curl -L dmt-system.com/get | bash
  fi

  if [ -d "$DMT_PATH" ]; then
    if [ -d "$DMT_PATH/user" ] && [ -d "$before_next_backup_dir/user" ]; then
      rm -rf "$DMT_PATH/user"
      printf "${YELLOW}Moving ${before_next_backup_dir}/user to ${DMT_PATH} ...${NC}\n"
      mv "$before_next_backup_dir/user" "$DMT_PATH"
    fi

    if [ -d "$DMT_PATH/state" ] && [ -d "$before_next_backup_dir/state" ]; then
      rm -rf "$DMT_PATH/state"
      printf "${YELLOW}Moving ${before_next_backup_dir}/state to ${DMT_PATH} ...${NC}\n"
      mv "$before_next_backup_dir/state" "$DMT_PATH"
    fi

    if [ -d "$DMT_PATH/log" ] && [ -d "$before_next_backup_dir/log" ]; then
      rm -rf "$DMT_PATH/log"
      printf "${YELLOW}Moving ${before_next_backup_dir}/log to ${DMT_PATH} ...${NC}\n"
      mv "$before_next_backup_dir/log" "$DMT_PATH"
    fi

    printf "${YELLOW}Removing ${before_next_backup_dir}${NC}\n"
    rm -rf "$before_next_backup_dir"
  else
    printf "${RED}Problem installing dmt -- ~/.dmt does not exist${NC}\n"

    if [ -d "$before_next_backup_dir" ]; then
      printf "${MAGENTA}Restoring ${before_next_backup_dir} to ${DMT_PATH}${NC}\n"
      mv "$before_next_backup_dir" "$DMT_PATH"
    fi
  fi

  dmt start
}

function dmt_install {
  # multi install: dmt update dev1 dev2 ... devn
  if [ -n "$2" ]; then
    for dev in "$@"
    do
      dmt_install "$dev"
    done
    return
  fi

  local cwd="`pwd`"
  cd "$DMT_PATH"
  . ./install "from-dmt-install" "$@" # calling with . preserves the newly loaded env
  cd "$cwd"
}

function dmt_update {
  symlink_if_unlinked

  if [ -z "$1" ]; then
    if dev_machine; then
      printf "${RED}Prevented on dev machine${NC}\n"
    fi
  else
    #copy_core_bootscripts
    compile_gui_if_missing

    dmt_install "$@"
  fi
}

function u {
  dmt_update "$@"
}

function re {
  dmt_renew "$@"
}

function dmt_renew {
  symlink_if_unlinked

  # supports multi install: dmt renew dev1 dev2 ... devN
  if [ -z "$2" ]; then
    dmt_update "$1"
    restart_remote_device "$1"
  else
    #symlink_if_unlinked
    compile_gui_if_missing

    for device in "$@"
    do
      dmt_renew "$device"
    done
  fi
}

function dmt_remove {
  printf "${GRAY}Please copy and execute:${NC}\n\n"
  printf "1) ${GREEN}dmt deactivate${NC}\n"
  printf "2) ${RED}rm -rf ~/.dmt${NC}\n"
}

function restart_remote_device {
  local cmd="source ~/.dmt/etc/.bash_aliases_slim && se \\\"if [ -f ~/.dmt/user/devices/this/before-renew ]; then ~/.dmt/user/devices/this/before-renew; fi; if [ -f ~/.dmt/etc/deploy_hooks/before-renew ]; then ~/.dmt/etc/deploy_hooks/before-renew; fi; ~/.dmt/etc/onboot/daemons restart_and_notify_on_fail\\\""

  local host="$1"

  if [ "$host" == "ap" ]; then
    host="$DMT_AP_DEFAULT_HOST"
  else
    local matching_host=''
    local ssh_port=''
    get_full_host matching_host ssh_port "$host"
    if [ $? -ne 1 ]; then # not error
      host="$matching_host"
    fi
  fi

  if [ -n "$host" ]; then
    remote -h "$host" --port "$ssh_port" "$cmd"
  else
    printf "${RED}Unknown host${NC}\n"
  fi
  #fi
}

function dmt_deactivate {
  if dev_machine; then
    printf "${RED}Prevented on dev machine${NC}\n"
    return
  fi

  local backup_file="$HOME/.bash_aliases-backup-by-dmt"

  if [ -L "$LOGNAME_HOME/.bash_aliases" ] && [ "$(head -3 $LOGNAME_HOME/.bash_aliases | tail -1)" == "# DMT ALIASES" ]; then
    rm ~/.bash_aliases

    if [ -f "$backup_file" ]; then
      mv "$backup_file" ~/.bash_aliases
    fi

    printf "${MAGENTA}dmt${NC} ${CYAN}was unlinked${NC}, only the folder ${CYAN}~/.dmt${NC} remains and is not active in any way.\n"
    echo
    printf "${CYAN}To reinstall${NC}\n"
    printf "${GREEN}cd $HOME/.dmt${NC}\n"
    printf "${GREEN}./install${NC}\n"
    echo
    printf "${CYAN}To remove the unused directory${NC}\n"
    printf "${GREEN}rm -rf $HOME/.dmt${NC}\n"
    echo
    printf "${WHITE}If you want to confirm that dmt is uninstalled you have to first reload the shell.${NC}\n"
  else
    printf "${RED}dmt is not installed${NC}\n"
  fi
}

function dmt_cd {
  cd "$DMT_PATH"
}

function dmt_bin {
  declare -a opts=(
    "compile"
    "download"
  )

  if [ -z "$1" ] || [ "$1" == "-h" ]; then
    printf "${YELLOW}Usage:${NC}\n"
    echo "${opts[@]}"
    return
  fi

  local matching_opt=''
  opts_matcher matching_opt "$1" "${opts[@]}"
  if [ $? -ne 0 ]; then # error
    printf "Use -h to see valid options\n\n"
    #matching_opt="aaa" # default
    return
  fi

  shift

  case "$matching_opt" in
    compile)
      if [ -d $DMT_RUST_CORE ]; then
        dmt_compile_bin
      else
        echo "rust core doesn't exists"
      fi
      ;;

    download)
      ;;
  esac
}

function dmt_compile_bin {
  local cwd="`pwd`"

  # todo: ... + generalize the process somehow....

  printf "${MAGENTA}$DMT_RUST_CORE/walkdir${NC}\n"
  if [ -d "$DMT_RUST_CORE/walkdir" ]; then
    cd "$DMT_RUST_CORE/walkdir"
    cargo build --release --example walkdir
    if [ "$?" -eq 0 ]; then
      mkdir -p "${DMT_PLATFORM_BIN}"
      # https://stackoverflow.com/questions/8139885/shellscript-action-if-two-files-are-different
      if ! cmp target/release/examples/walkdir "${DMT_PLATFORM_BIN}/walkdir" >/dev/null 2>&1; then
        printf "${GREEN}‚úì Build successful, copying executable to ${DMT_PLATFORM_BIN}${NC}\n"
        cp target/release/examples/walkdir "${DMT_PLATFORM_BIN}"
      else
        printf "${CYAN}‚úì Build successful but executable in ${DMT_PLATFORM_BIN} is already the newest version${NC}\n"
      fi
    fi
  fi

  echo

  printf "${MAGENTA}$DMT_RUST_CORE/walksearch${NC}\n"
  if [ -d "$DMT_RUST_CORE/walksearch" ]; then
    cd "$DMT_RUST_CORE/walksearch"
    cargo build --release
    if [ "$?" -eq 0 ]; then
      mkdir -p "${DMT_PLATFORM_BIN}"
      # https://stackoverflow.com/questions/8139885/shellscript-action-if-two-files-are-different
      if ! cmp target/release/walksearch "${DMT_PLATFORM_BIN}/walksearch" >/dev/null 2>&1; then
        printf "${GREEN}‚úì Build successful, copying executable to ${DMT_PLATFORM_BIN}${NC}\n"
        cp target/release/walksearch "${DMT_PLATFORM_BIN}"
      else
        printf "${CYAN}‚úì Build successful but executable in ${DMT_PLATFORM_BIN} is already the newest version${NC}\n"
      fi
    fi
  fi

  cd "$cwd"
}
